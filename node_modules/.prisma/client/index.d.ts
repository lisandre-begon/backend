
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model user
 * 
 */
export type user = $Result.DefaultSelection<Prisma.$userPayload>
/**
 * Model recipe
 * 
 */
export type recipe = $Result.DefaultSelection<Prisma.$recipePayload>
/**
 * Model recipe_type
 * 
 */
export type recipe_type = $Result.DefaultSelection<Prisma.$recipe_typePayload>
/**
 * Model ingredient
 * 
 */
export type ingredient = $Result.DefaultSelection<Prisma.$ingredientPayload>
/**
 * Model ingredientinrecipe
 * 
 */
export type ingredientinrecipe = $Result.DefaultSelection<Prisma.$ingredientinrecipePayload>
/**
 * Model post
 * 
 */
export type post = $Result.DefaultSelection<Prisma.$postPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<ExtArgs>;

  /**
   * `prisma.recipe`: Exposes CRUD operations for the **recipe** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Recipes
    * const recipes = await prisma.recipe.findMany()
    * ```
    */
  get recipe(): Prisma.recipeDelegate<ExtArgs>;

  /**
   * `prisma.recipe_type`: Exposes CRUD operations for the **recipe_type** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Recipe_types
    * const recipe_types = await prisma.recipe_type.findMany()
    * ```
    */
  get recipe_type(): Prisma.recipe_typeDelegate<ExtArgs>;

  /**
   * `prisma.ingredient`: Exposes CRUD operations for the **ingredient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ingredients
    * const ingredients = await prisma.ingredient.findMany()
    * ```
    */
  get ingredient(): Prisma.ingredientDelegate<ExtArgs>;

  /**
   * `prisma.ingredientinrecipe`: Exposes CRUD operations for the **ingredientinrecipe** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ingredientinrecipes
    * const ingredientinrecipes = await prisma.ingredientinrecipe.findMany()
    * ```
    */
  get ingredientinrecipe(): Prisma.ingredientinrecipeDelegate<ExtArgs>;

  /**
   * `prisma.post`: Exposes CRUD operations for the **post** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Posts
    * const posts = await prisma.post.findMany()
    * ```
    */
  get post(): Prisma.postDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.13.0
   * Query Engine version: b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    user: 'user',
    recipe: 'recipe',
    recipe_type: 'recipe_type',
    ingredient: 'ingredient',
    ingredientinrecipe: 'ingredientinrecipe',
    post: 'post'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'recipe' | 'recipe_type' | 'ingredient' | 'ingredientinrecipe' | 'post'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      user: {
        payload: Prisma.$userPayload<ExtArgs>
        fields: Prisma.userFieldRefs
        operations: {
          findUnique: {
            args: Prisma.userFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.userFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findFirst: {
            args: Prisma.userFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.userFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findMany: {
            args: Prisma.userFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>[]
          }
          create: {
            args: Prisma.userCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          createMany: {
            args: Prisma.userCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.userDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          update: {
            args: Prisma.userUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          deleteMany: {
            args: Prisma.userDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.userUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.userUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.userGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.userCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      recipe: {
        payload: Prisma.$recipePayload<ExtArgs>
        fields: Prisma.recipeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.recipeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$recipePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.recipeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$recipePayload>
          }
          findFirst: {
            args: Prisma.recipeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$recipePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.recipeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$recipePayload>
          }
          findMany: {
            args: Prisma.recipeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$recipePayload>[]
          }
          create: {
            args: Prisma.recipeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$recipePayload>
          }
          createMany: {
            args: Prisma.recipeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.recipeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$recipePayload>
          }
          update: {
            args: Prisma.recipeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$recipePayload>
          }
          deleteMany: {
            args: Prisma.recipeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.recipeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.recipeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$recipePayload>
          }
          aggregate: {
            args: Prisma.RecipeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRecipe>
          }
          groupBy: {
            args: Prisma.recipeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RecipeGroupByOutputType>[]
          }
          count: {
            args: Prisma.recipeCountArgs<ExtArgs>,
            result: $Utils.Optional<RecipeCountAggregateOutputType> | number
          }
        }
      }
      recipe_type: {
        payload: Prisma.$recipe_typePayload<ExtArgs>
        fields: Prisma.recipe_typeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.recipe_typeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$recipe_typePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.recipe_typeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$recipe_typePayload>
          }
          findFirst: {
            args: Prisma.recipe_typeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$recipe_typePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.recipe_typeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$recipe_typePayload>
          }
          findMany: {
            args: Prisma.recipe_typeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$recipe_typePayload>[]
          }
          create: {
            args: Prisma.recipe_typeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$recipe_typePayload>
          }
          createMany: {
            args: Prisma.recipe_typeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.recipe_typeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$recipe_typePayload>
          }
          update: {
            args: Prisma.recipe_typeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$recipe_typePayload>
          }
          deleteMany: {
            args: Prisma.recipe_typeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.recipe_typeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.recipe_typeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$recipe_typePayload>
          }
          aggregate: {
            args: Prisma.Recipe_typeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRecipe_type>
          }
          groupBy: {
            args: Prisma.recipe_typeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Recipe_typeGroupByOutputType>[]
          }
          count: {
            args: Prisma.recipe_typeCountArgs<ExtArgs>,
            result: $Utils.Optional<Recipe_typeCountAggregateOutputType> | number
          }
        }
      }
      ingredient: {
        payload: Prisma.$ingredientPayload<ExtArgs>
        fields: Prisma.ingredientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ingredientFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ingredientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ingredientFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ingredientPayload>
          }
          findFirst: {
            args: Prisma.ingredientFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ingredientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ingredientFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ingredientPayload>
          }
          findMany: {
            args: Prisma.ingredientFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ingredientPayload>[]
          }
          create: {
            args: Prisma.ingredientCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ingredientPayload>
          }
          createMany: {
            args: Prisma.ingredientCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ingredientDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ingredientPayload>
          }
          update: {
            args: Prisma.ingredientUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ingredientPayload>
          }
          deleteMany: {
            args: Prisma.ingredientDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ingredientUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ingredientUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ingredientPayload>
          }
          aggregate: {
            args: Prisma.IngredientAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateIngredient>
          }
          groupBy: {
            args: Prisma.ingredientGroupByArgs<ExtArgs>,
            result: $Utils.Optional<IngredientGroupByOutputType>[]
          }
          count: {
            args: Prisma.ingredientCountArgs<ExtArgs>,
            result: $Utils.Optional<IngredientCountAggregateOutputType> | number
          }
        }
      }
      ingredientinrecipe: {
        payload: Prisma.$ingredientinrecipePayload<ExtArgs>
        fields: Prisma.ingredientinrecipeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ingredientinrecipeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ingredientinrecipePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ingredientinrecipeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ingredientinrecipePayload>
          }
          findFirst: {
            args: Prisma.ingredientinrecipeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ingredientinrecipePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ingredientinrecipeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ingredientinrecipePayload>
          }
          findMany: {
            args: Prisma.ingredientinrecipeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ingredientinrecipePayload>[]
          }
          create: {
            args: Prisma.ingredientinrecipeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ingredientinrecipePayload>
          }
          createMany: {
            args: Prisma.ingredientinrecipeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ingredientinrecipeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ingredientinrecipePayload>
          }
          update: {
            args: Prisma.ingredientinrecipeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ingredientinrecipePayload>
          }
          deleteMany: {
            args: Prisma.ingredientinrecipeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ingredientinrecipeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ingredientinrecipeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ingredientinrecipePayload>
          }
          aggregate: {
            args: Prisma.IngredientinrecipeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateIngredientinrecipe>
          }
          groupBy: {
            args: Prisma.ingredientinrecipeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<IngredientinrecipeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ingredientinrecipeCountArgs<ExtArgs>,
            result: $Utils.Optional<IngredientinrecipeCountAggregateOutputType> | number
          }
        }
      }
      post: {
        payload: Prisma.$postPayload<ExtArgs>
        fields: Prisma.postFieldRefs
        operations: {
          findUnique: {
            args: Prisma.postFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$postPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.postFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$postPayload>
          }
          findFirst: {
            args: Prisma.postFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$postPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.postFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$postPayload>
          }
          findMany: {
            args: Prisma.postFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$postPayload>[]
          }
          create: {
            args: Prisma.postCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$postPayload>
          }
          createMany: {
            args: Prisma.postCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.postDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$postPayload>
          }
          update: {
            args: Prisma.postUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$postPayload>
          }
          deleteMany: {
            args: Prisma.postDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.postUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.postUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$postPayload>
          }
          aggregate: {
            args: Prisma.PostAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePost>
          }
          groupBy: {
            args: Prisma.postGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PostGroupByOutputType>[]
          }
          count: {
            args: Prisma.postCountArgs<ExtArgs>,
            result: $Utils.Optional<PostCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    posts: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    posts?: boolean | UserCountOutputTypeCountPostsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: postWhereInput
  }


  /**
   * Count Type RecipeCountOutputType
   */

  export type RecipeCountOutputType = {
    ingredients: number
    posts: number
  }

  export type RecipeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ingredients?: boolean | RecipeCountOutputTypeCountIngredientsArgs
    posts?: boolean | RecipeCountOutputTypeCountPostsArgs
  }

  // Custom InputTypes
  /**
   * RecipeCountOutputType without action
   */
  export type RecipeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeCountOutputType
     */
    select?: RecipeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RecipeCountOutputType without action
   */
  export type RecipeCountOutputTypeCountIngredientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ingredientinrecipeWhereInput
  }

  /**
   * RecipeCountOutputType without action
   */
  export type RecipeCountOutputTypeCountPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: postWhereInput
  }


  /**
   * Count Type Recipe_typeCountOutputType
   */

  export type Recipe_typeCountOutputType = {
    recipes: number
    posts: number
  }

  export type Recipe_typeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipes?: boolean | Recipe_typeCountOutputTypeCountRecipesArgs
    posts?: boolean | Recipe_typeCountOutputTypeCountPostsArgs
  }

  // Custom InputTypes
  /**
   * Recipe_typeCountOutputType without action
   */
  export type Recipe_typeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe_typeCountOutputType
     */
    select?: Recipe_typeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Recipe_typeCountOutputType without action
   */
  export type Recipe_typeCountOutputTypeCountRecipesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: recipeWhereInput
  }

  /**
   * Recipe_typeCountOutputType without action
   */
  export type Recipe_typeCountOutputTypeCountPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: postWhereInput
  }


  /**
   * Count Type IngredientCountOutputType
   */

  export type IngredientCountOutputType = {
    recipes: number
  }

  export type IngredientCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipes?: boolean | IngredientCountOutputTypeCountRecipesArgs
  }

  // Custom InputTypes
  /**
   * IngredientCountOutputType without action
   */
  export type IngredientCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IngredientCountOutputType
     */
    select?: IngredientCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * IngredientCountOutputType without action
   */
  export type IngredientCountOutputTypeCountRecipesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ingredientinrecipeWhereInput
  }


  /**
   * Models
   */

  /**
   * Model user
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    pseudo: string | null
    password: string | null
    email: string | null
    isadmin: boolean | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    pseudo: string | null
    password: string | null
    email: string | null
    isadmin: boolean | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    pseudo: number
    password: number
    email: number
    isadmin: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    pseudo?: true
    password?: true
    email?: true
    isadmin?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    pseudo?: true
    password?: true
    email?: true
    isadmin?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    pseudo?: true
    password?: true
    email?: true
    isadmin?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user to aggregate.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type userGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userWhereInput
    orderBy?: userOrderByWithAggregationInput | userOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    pseudo: string
    password: string
    email: string
    isadmin: boolean
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends userGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pseudo?: boolean
    password?: boolean
    email?: boolean
    isadmin?: boolean
    posts?: boolean | user$postsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type userSelectScalar = {
    id?: boolean
    pseudo?: boolean
    password?: boolean
    email?: boolean
    isadmin?: boolean
  }


  export type userInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    posts?: boolean | user$postsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $userPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user"
    objects: {
      posts: Prisma.$postPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      pseudo: string
      password: string
      email: string
      isadmin: boolean
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type userGetPayload<S extends boolean | null | undefined | userDefaultArgs> = $Result.GetResult<Prisma.$userPayload, S>

  type userCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<userFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface userDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user'], meta: { name: 'user' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends userFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, userFindUniqueArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {userFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends userFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends userFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindFirstArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends userFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends userFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends userCreateArgs<ExtArgs>>(
      args: SelectSubset<T, userCreateArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {userCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends userCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends userDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, userDeleteArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends userUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, userUpdateArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends userDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends userUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, userUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends userUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, userUpsertArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends userGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: userGroupByArgs['orderBy'] }
        : { orderBy?: userGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, userGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user model
   */
  readonly fields: userFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__userClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    posts<T extends user$postsArgs<ExtArgs> = {}>(args?: Subset<T, user$postsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$postPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the user model
   */ 
  interface userFieldRefs {
    readonly id: FieldRef<"user", 'String'>
    readonly pseudo: FieldRef<"user", 'String'>
    readonly password: FieldRef<"user", 'String'>
    readonly email: FieldRef<"user", 'String'>
    readonly isadmin: FieldRef<"user", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * user findUnique
   */
  export type userFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findUniqueOrThrow
   */
  export type userFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findFirst
   */
  export type userFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user findFirstOrThrow
   */
  export type userFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user findMany
   */
  export type userFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user create
   */
  export type userCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to create a user.
     */
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }

  /**
   * user createMany
   */
  export type userCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: userCreateManyInput | userCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user update
   */
  export type userUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to update a user.
     */
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     */
    where: userWhereUniqueInput
  }

  /**
   * user updateMany
   */
  export type userUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: userWhereInput
  }

  /**
   * user upsert
   */
  export type userUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The filter to search for the user to update in case it exists.
     */
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     */
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }

  /**
   * user delete
   */
  export type userDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter which user to delete.
     */
    where: userWhereUniqueInput
  }

  /**
   * user deleteMany
   */
  export type userDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: userWhereInput
  }

  /**
   * user.posts
   */
  export type user$postsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post
     */
    select?: postSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postInclude<ExtArgs> | null
    where?: postWhereInput
    orderBy?: postOrderByWithRelationInput | postOrderByWithRelationInput[]
    cursor?: postWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * user without action
   */
  export type userDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
  }


  /**
   * Model recipe
   */

  export type AggregateRecipe = {
    _count: RecipeCountAggregateOutputType | null
    _avg: RecipeAvgAggregateOutputType | null
    _sum: RecipeSumAggregateOutputType | null
    _min: RecipeMinAggregateOutputType | null
    _max: RecipeMaxAggregateOutputType | null
  }

  export type RecipeAvgAggregateOutputType = {
    time_of_preparation: number | null
    number_of_person: number | null
  }

  export type RecipeSumAggregateOutputType = {
    time_of_preparation: number | null
    number_of_person: number | null
  }

  export type RecipeMinAggregateOutputType = {
    id_recipe: string | null
    time_of_preparation: number | null
    name: string | null
    description: string | null
    number_of_person: number | null
    photo: string | null
    recipetypeid: string | null
  }

  export type RecipeMaxAggregateOutputType = {
    id_recipe: string | null
    time_of_preparation: number | null
    name: string | null
    description: string | null
    number_of_person: number | null
    photo: string | null
    recipetypeid: string | null
  }

  export type RecipeCountAggregateOutputType = {
    id_recipe: number
    time_of_preparation: number
    name: number
    description: number
    number_of_person: number
    photo: number
    recipetypeid: number
    _all: number
  }


  export type RecipeAvgAggregateInputType = {
    time_of_preparation?: true
    number_of_person?: true
  }

  export type RecipeSumAggregateInputType = {
    time_of_preparation?: true
    number_of_person?: true
  }

  export type RecipeMinAggregateInputType = {
    id_recipe?: true
    time_of_preparation?: true
    name?: true
    description?: true
    number_of_person?: true
    photo?: true
    recipetypeid?: true
  }

  export type RecipeMaxAggregateInputType = {
    id_recipe?: true
    time_of_preparation?: true
    name?: true
    description?: true
    number_of_person?: true
    photo?: true
    recipetypeid?: true
  }

  export type RecipeCountAggregateInputType = {
    id_recipe?: true
    time_of_preparation?: true
    name?: true
    description?: true
    number_of_person?: true
    photo?: true
    recipetypeid?: true
    _all?: true
  }

  export type RecipeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which recipe to aggregate.
     */
    where?: recipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of recipes to fetch.
     */
    orderBy?: recipeOrderByWithRelationInput | recipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: recipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` recipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` recipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned recipes
    **/
    _count?: true | RecipeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RecipeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RecipeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecipeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecipeMaxAggregateInputType
  }

  export type GetRecipeAggregateType<T extends RecipeAggregateArgs> = {
        [P in keyof T & keyof AggregateRecipe]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecipe[P]>
      : GetScalarType<T[P], AggregateRecipe[P]>
  }




  export type recipeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: recipeWhereInput
    orderBy?: recipeOrderByWithAggregationInput | recipeOrderByWithAggregationInput[]
    by: RecipeScalarFieldEnum[] | RecipeScalarFieldEnum
    having?: recipeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecipeCountAggregateInputType | true
    _avg?: RecipeAvgAggregateInputType
    _sum?: RecipeSumAggregateInputType
    _min?: RecipeMinAggregateInputType
    _max?: RecipeMaxAggregateInputType
  }

  export type RecipeGroupByOutputType = {
    id_recipe: string
    time_of_preparation: number
    name: string
    description: string | null
    number_of_person: number
    photo: string | null
    recipetypeid: string
    _count: RecipeCountAggregateOutputType | null
    _avg: RecipeAvgAggregateOutputType | null
    _sum: RecipeSumAggregateOutputType | null
    _min: RecipeMinAggregateOutputType | null
    _max: RecipeMaxAggregateOutputType | null
  }

  type GetRecipeGroupByPayload<T extends recipeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RecipeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecipeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecipeGroupByOutputType[P]>
            : GetScalarType<T[P], RecipeGroupByOutputType[P]>
        }
      >
    >


  export type recipeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_recipe?: boolean
    time_of_preparation?: boolean
    name?: boolean
    description?: boolean
    number_of_person?: boolean
    photo?: boolean
    recipetypeid?: boolean
    ingredients?: boolean | recipe$ingredientsArgs<ExtArgs>
    posts?: boolean | recipe$postsArgs<ExtArgs>
    recipetype?: boolean | recipe_typeDefaultArgs<ExtArgs>
    _count?: boolean | RecipeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recipe"]>

  export type recipeSelectScalar = {
    id_recipe?: boolean
    time_of_preparation?: boolean
    name?: boolean
    description?: boolean
    number_of_person?: boolean
    photo?: boolean
    recipetypeid?: boolean
  }


  export type recipeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ingredients?: boolean | recipe$ingredientsArgs<ExtArgs>
    posts?: boolean | recipe$postsArgs<ExtArgs>
    recipetype?: boolean | recipe_typeDefaultArgs<ExtArgs>
    _count?: boolean | RecipeCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $recipePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "recipe"
    objects: {
      ingredients: Prisma.$ingredientinrecipePayload<ExtArgs>[]
      posts: Prisma.$postPayload<ExtArgs>[]
      recipetype: Prisma.$recipe_typePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id_recipe: string
      time_of_preparation: number
      name: string
      description: string | null
      number_of_person: number
      photo: string | null
      recipetypeid: string
    }, ExtArgs["result"]["recipe"]>
    composites: {}
  }


  type recipeGetPayload<S extends boolean | null | undefined | recipeDefaultArgs> = $Result.GetResult<Prisma.$recipePayload, S>

  type recipeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<recipeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RecipeCountAggregateInputType | true
    }

  export interface recipeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['recipe'], meta: { name: 'recipe' } }
    /**
     * Find zero or one Recipe that matches the filter.
     * @param {recipeFindUniqueArgs} args - Arguments to find a Recipe
     * @example
     * // Get one Recipe
     * const recipe = await prisma.recipe.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends recipeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, recipeFindUniqueArgs<ExtArgs>>
    ): Prisma__recipeClient<$Result.GetResult<Prisma.$recipePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Recipe that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {recipeFindUniqueOrThrowArgs} args - Arguments to find a Recipe
     * @example
     * // Get one Recipe
     * const recipe = await prisma.recipe.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends recipeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, recipeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__recipeClient<$Result.GetResult<Prisma.$recipePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Recipe that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {recipeFindFirstArgs} args - Arguments to find a Recipe
     * @example
     * // Get one Recipe
     * const recipe = await prisma.recipe.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends recipeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, recipeFindFirstArgs<ExtArgs>>
    ): Prisma__recipeClient<$Result.GetResult<Prisma.$recipePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Recipe that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {recipeFindFirstOrThrowArgs} args - Arguments to find a Recipe
     * @example
     * // Get one Recipe
     * const recipe = await prisma.recipe.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends recipeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, recipeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__recipeClient<$Result.GetResult<Prisma.$recipePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Recipes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {recipeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Recipes
     * const recipes = await prisma.recipe.findMany()
     * 
     * // Get first 10 Recipes
     * const recipes = await prisma.recipe.findMany({ take: 10 })
     * 
     * // Only select the `id_recipe`
     * const recipeWithId_recipeOnly = await prisma.recipe.findMany({ select: { id_recipe: true } })
     * 
    **/
    findMany<T extends recipeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, recipeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$recipePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Recipe.
     * @param {recipeCreateArgs} args - Arguments to create a Recipe.
     * @example
     * // Create one Recipe
     * const Recipe = await prisma.recipe.create({
     *   data: {
     *     // ... data to create a Recipe
     *   }
     * })
     * 
    **/
    create<T extends recipeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, recipeCreateArgs<ExtArgs>>
    ): Prisma__recipeClient<$Result.GetResult<Prisma.$recipePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Recipes.
     *     @param {recipeCreateManyArgs} args - Arguments to create many Recipes.
     *     @example
     *     // Create many Recipes
     *     const recipe = await prisma.recipe.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends recipeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, recipeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Recipe.
     * @param {recipeDeleteArgs} args - Arguments to delete one Recipe.
     * @example
     * // Delete one Recipe
     * const Recipe = await prisma.recipe.delete({
     *   where: {
     *     // ... filter to delete one Recipe
     *   }
     * })
     * 
    **/
    delete<T extends recipeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, recipeDeleteArgs<ExtArgs>>
    ): Prisma__recipeClient<$Result.GetResult<Prisma.$recipePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Recipe.
     * @param {recipeUpdateArgs} args - Arguments to update one Recipe.
     * @example
     * // Update one Recipe
     * const recipe = await prisma.recipe.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends recipeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, recipeUpdateArgs<ExtArgs>>
    ): Prisma__recipeClient<$Result.GetResult<Prisma.$recipePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Recipes.
     * @param {recipeDeleteManyArgs} args - Arguments to filter Recipes to delete.
     * @example
     * // Delete a few Recipes
     * const { count } = await prisma.recipe.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends recipeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, recipeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Recipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {recipeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Recipes
     * const recipe = await prisma.recipe.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends recipeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, recipeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Recipe.
     * @param {recipeUpsertArgs} args - Arguments to update or create a Recipe.
     * @example
     * // Update or create a Recipe
     * const recipe = await prisma.recipe.upsert({
     *   create: {
     *     // ... data to create a Recipe
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Recipe we want to update
     *   }
     * })
    **/
    upsert<T extends recipeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, recipeUpsertArgs<ExtArgs>>
    ): Prisma__recipeClient<$Result.GetResult<Prisma.$recipePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Recipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {recipeCountArgs} args - Arguments to filter Recipes to count.
     * @example
     * // Count the number of Recipes
     * const count = await prisma.recipe.count({
     *   where: {
     *     // ... the filter for the Recipes we want to count
     *   }
     * })
    **/
    count<T extends recipeCountArgs>(
      args?: Subset<T, recipeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecipeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Recipe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecipeAggregateArgs>(args: Subset<T, RecipeAggregateArgs>): Prisma.PrismaPromise<GetRecipeAggregateType<T>>

    /**
     * Group by Recipe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {recipeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends recipeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: recipeGroupByArgs['orderBy'] }
        : { orderBy?: recipeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, recipeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecipeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the recipe model
   */
  readonly fields: recipeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for recipe.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__recipeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    ingredients<T extends recipe$ingredientsArgs<ExtArgs> = {}>(args?: Subset<T, recipe$ingredientsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ingredientinrecipePayload<ExtArgs>, T, 'findMany'> | Null>;

    posts<T extends recipe$postsArgs<ExtArgs> = {}>(args?: Subset<T, recipe$postsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$postPayload<ExtArgs>, T, 'findMany'> | Null>;

    recipetype<T extends recipe_typeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, recipe_typeDefaultArgs<ExtArgs>>): Prisma__recipe_typeClient<$Result.GetResult<Prisma.$recipe_typePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the recipe model
   */ 
  interface recipeFieldRefs {
    readonly id_recipe: FieldRef<"recipe", 'String'>
    readonly time_of_preparation: FieldRef<"recipe", 'Int'>
    readonly name: FieldRef<"recipe", 'String'>
    readonly description: FieldRef<"recipe", 'String'>
    readonly number_of_person: FieldRef<"recipe", 'Int'>
    readonly photo: FieldRef<"recipe", 'String'>
    readonly recipetypeid: FieldRef<"recipe", 'String'>
  }
    

  // Custom InputTypes
  /**
   * recipe findUnique
   */
  export type recipeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recipe
     */
    select?: recipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recipeInclude<ExtArgs> | null
    /**
     * Filter, which recipe to fetch.
     */
    where: recipeWhereUniqueInput
  }

  /**
   * recipe findUniqueOrThrow
   */
  export type recipeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recipe
     */
    select?: recipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recipeInclude<ExtArgs> | null
    /**
     * Filter, which recipe to fetch.
     */
    where: recipeWhereUniqueInput
  }

  /**
   * recipe findFirst
   */
  export type recipeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recipe
     */
    select?: recipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recipeInclude<ExtArgs> | null
    /**
     * Filter, which recipe to fetch.
     */
    where?: recipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of recipes to fetch.
     */
    orderBy?: recipeOrderByWithRelationInput | recipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for recipes.
     */
    cursor?: recipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` recipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` recipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of recipes.
     */
    distinct?: RecipeScalarFieldEnum | RecipeScalarFieldEnum[]
  }

  /**
   * recipe findFirstOrThrow
   */
  export type recipeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recipe
     */
    select?: recipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recipeInclude<ExtArgs> | null
    /**
     * Filter, which recipe to fetch.
     */
    where?: recipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of recipes to fetch.
     */
    orderBy?: recipeOrderByWithRelationInput | recipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for recipes.
     */
    cursor?: recipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` recipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` recipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of recipes.
     */
    distinct?: RecipeScalarFieldEnum | RecipeScalarFieldEnum[]
  }

  /**
   * recipe findMany
   */
  export type recipeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recipe
     */
    select?: recipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recipeInclude<ExtArgs> | null
    /**
     * Filter, which recipes to fetch.
     */
    where?: recipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of recipes to fetch.
     */
    orderBy?: recipeOrderByWithRelationInput | recipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing recipes.
     */
    cursor?: recipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` recipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` recipes.
     */
    skip?: number
    distinct?: RecipeScalarFieldEnum | RecipeScalarFieldEnum[]
  }

  /**
   * recipe create
   */
  export type recipeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recipe
     */
    select?: recipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recipeInclude<ExtArgs> | null
    /**
     * The data needed to create a recipe.
     */
    data: XOR<recipeCreateInput, recipeUncheckedCreateInput>
  }

  /**
   * recipe createMany
   */
  export type recipeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many recipes.
     */
    data: recipeCreateManyInput | recipeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * recipe update
   */
  export type recipeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recipe
     */
    select?: recipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recipeInclude<ExtArgs> | null
    /**
     * The data needed to update a recipe.
     */
    data: XOR<recipeUpdateInput, recipeUncheckedUpdateInput>
    /**
     * Choose, which recipe to update.
     */
    where: recipeWhereUniqueInput
  }

  /**
   * recipe updateMany
   */
  export type recipeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update recipes.
     */
    data: XOR<recipeUpdateManyMutationInput, recipeUncheckedUpdateManyInput>
    /**
     * Filter which recipes to update
     */
    where?: recipeWhereInput
  }

  /**
   * recipe upsert
   */
  export type recipeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recipe
     */
    select?: recipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recipeInclude<ExtArgs> | null
    /**
     * The filter to search for the recipe to update in case it exists.
     */
    where: recipeWhereUniqueInput
    /**
     * In case the recipe found by the `where` argument doesn't exist, create a new recipe with this data.
     */
    create: XOR<recipeCreateInput, recipeUncheckedCreateInput>
    /**
     * In case the recipe was found with the provided `where` argument, update it with this data.
     */
    update: XOR<recipeUpdateInput, recipeUncheckedUpdateInput>
  }

  /**
   * recipe delete
   */
  export type recipeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recipe
     */
    select?: recipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recipeInclude<ExtArgs> | null
    /**
     * Filter which recipe to delete.
     */
    where: recipeWhereUniqueInput
  }

  /**
   * recipe deleteMany
   */
  export type recipeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which recipes to delete
     */
    where?: recipeWhereInput
  }

  /**
   * recipe.ingredients
   */
  export type recipe$ingredientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ingredientinrecipe
     */
    select?: ingredientinrecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ingredientinrecipeInclude<ExtArgs> | null
    where?: ingredientinrecipeWhereInput
    orderBy?: ingredientinrecipeOrderByWithRelationInput | ingredientinrecipeOrderByWithRelationInput[]
    cursor?: ingredientinrecipeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IngredientinrecipeScalarFieldEnum | IngredientinrecipeScalarFieldEnum[]
  }

  /**
   * recipe.posts
   */
  export type recipe$postsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post
     */
    select?: postSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postInclude<ExtArgs> | null
    where?: postWhereInput
    orderBy?: postOrderByWithRelationInput | postOrderByWithRelationInput[]
    cursor?: postWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * recipe without action
   */
  export type recipeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recipe
     */
    select?: recipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recipeInclude<ExtArgs> | null
  }


  /**
   * Model recipe_type
   */

  export type AggregateRecipe_type = {
    _count: Recipe_typeCountAggregateOutputType | null
    _min: Recipe_typeMinAggregateOutputType | null
    _max: Recipe_typeMaxAggregateOutputType | null
  }

  export type Recipe_typeMinAggregateOutputType = {
    id_recipe_type: string | null
    name: string | null
  }

  export type Recipe_typeMaxAggregateOutputType = {
    id_recipe_type: string | null
    name: string | null
  }

  export type Recipe_typeCountAggregateOutputType = {
    id_recipe_type: number
    name: number
    _all: number
  }


  export type Recipe_typeMinAggregateInputType = {
    id_recipe_type?: true
    name?: true
  }

  export type Recipe_typeMaxAggregateInputType = {
    id_recipe_type?: true
    name?: true
  }

  export type Recipe_typeCountAggregateInputType = {
    id_recipe_type?: true
    name?: true
    _all?: true
  }

  export type Recipe_typeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which recipe_type to aggregate.
     */
    where?: recipe_typeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of recipe_types to fetch.
     */
    orderBy?: recipe_typeOrderByWithRelationInput | recipe_typeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: recipe_typeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` recipe_types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` recipe_types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned recipe_types
    **/
    _count?: true | Recipe_typeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Recipe_typeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Recipe_typeMaxAggregateInputType
  }

  export type GetRecipe_typeAggregateType<T extends Recipe_typeAggregateArgs> = {
        [P in keyof T & keyof AggregateRecipe_type]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecipe_type[P]>
      : GetScalarType<T[P], AggregateRecipe_type[P]>
  }




  export type recipe_typeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: recipe_typeWhereInput
    orderBy?: recipe_typeOrderByWithAggregationInput | recipe_typeOrderByWithAggregationInput[]
    by: Recipe_typeScalarFieldEnum[] | Recipe_typeScalarFieldEnum
    having?: recipe_typeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Recipe_typeCountAggregateInputType | true
    _min?: Recipe_typeMinAggregateInputType
    _max?: Recipe_typeMaxAggregateInputType
  }

  export type Recipe_typeGroupByOutputType = {
    id_recipe_type: string
    name: string
    _count: Recipe_typeCountAggregateOutputType | null
    _min: Recipe_typeMinAggregateOutputType | null
    _max: Recipe_typeMaxAggregateOutputType | null
  }

  type GetRecipe_typeGroupByPayload<T extends recipe_typeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Recipe_typeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Recipe_typeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Recipe_typeGroupByOutputType[P]>
            : GetScalarType<T[P], Recipe_typeGroupByOutputType[P]>
        }
      >
    >


  export type recipe_typeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_recipe_type?: boolean
    name?: boolean
    recipes?: boolean | recipe_type$recipesArgs<ExtArgs>
    posts?: boolean | recipe_type$postsArgs<ExtArgs>
    _count?: boolean | Recipe_typeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recipe_type"]>

  export type recipe_typeSelectScalar = {
    id_recipe_type?: boolean
    name?: boolean
  }


  export type recipe_typeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipes?: boolean | recipe_type$recipesArgs<ExtArgs>
    posts?: boolean | recipe_type$postsArgs<ExtArgs>
    _count?: boolean | Recipe_typeCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $recipe_typePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "recipe_type"
    objects: {
      recipes: Prisma.$recipePayload<ExtArgs>[]
      posts: Prisma.$postPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_recipe_type: string
      name: string
    }, ExtArgs["result"]["recipe_type"]>
    composites: {}
  }


  type recipe_typeGetPayload<S extends boolean | null | undefined | recipe_typeDefaultArgs> = $Result.GetResult<Prisma.$recipe_typePayload, S>

  type recipe_typeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<recipe_typeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Recipe_typeCountAggregateInputType | true
    }

  export interface recipe_typeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['recipe_type'], meta: { name: 'recipe_type' } }
    /**
     * Find zero or one Recipe_type that matches the filter.
     * @param {recipe_typeFindUniqueArgs} args - Arguments to find a Recipe_type
     * @example
     * // Get one Recipe_type
     * const recipe_type = await prisma.recipe_type.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends recipe_typeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, recipe_typeFindUniqueArgs<ExtArgs>>
    ): Prisma__recipe_typeClient<$Result.GetResult<Prisma.$recipe_typePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Recipe_type that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {recipe_typeFindUniqueOrThrowArgs} args - Arguments to find a Recipe_type
     * @example
     * // Get one Recipe_type
     * const recipe_type = await prisma.recipe_type.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends recipe_typeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, recipe_typeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__recipe_typeClient<$Result.GetResult<Prisma.$recipe_typePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Recipe_type that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {recipe_typeFindFirstArgs} args - Arguments to find a Recipe_type
     * @example
     * // Get one Recipe_type
     * const recipe_type = await prisma.recipe_type.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends recipe_typeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, recipe_typeFindFirstArgs<ExtArgs>>
    ): Prisma__recipe_typeClient<$Result.GetResult<Prisma.$recipe_typePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Recipe_type that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {recipe_typeFindFirstOrThrowArgs} args - Arguments to find a Recipe_type
     * @example
     * // Get one Recipe_type
     * const recipe_type = await prisma.recipe_type.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends recipe_typeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, recipe_typeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__recipe_typeClient<$Result.GetResult<Prisma.$recipe_typePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Recipe_types that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {recipe_typeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Recipe_types
     * const recipe_types = await prisma.recipe_type.findMany()
     * 
     * // Get first 10 Recipe_types
     * const recipe_types = await prisma.recipe_type.findMany({ take: 10 })
     * 
     * // Only select the `id_recipe_type`
     * const recipe_typeWithId_recipe_typeOnly = await prisma.recipe_type.findMany({ select: { id_recipe_type: true } })
     * 
    **/
    findMany<T extends recipe_typeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, recipe_typeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$recipe_typePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Recipe_type.
     * @param {recipe_typeCreateArgs} args - Arguments to create a Recipe_type.
     * @example
     * // Create one Recipe_type
     * const Recipe_type = await prisma.recipe_type.create({
     *   data: {
     *     // ... data to create a Recipe_type
     *   }
     * })
     * 
    **/
    create<T extends recipe_typeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, recipe_typeCreateArgs<ExtArgs>>
    ): Prisma__recipe_typeClient<$Result.GetResult<Prisma.$recipe_typePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Recipe_types.
     *     @param {recipe_typeCreateManyArgs} args - Arguments to create many Recipe_types.
     *     @example
     *     // Create many Recipe_types
     *     const recipe_type = await prisma.recipe_type.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends recipe_typeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, recipe_typeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Recipe_type.
     * @param {recipe_typeDeleteArgs} args - Arguments to delete one Recipe_type.
     * @example
     * // Delete one Recipe_type
     * const Recipe_type = await prisma.recipe_type.delete({
     *   where: {
     *     // ... filter to delete one Recipe_type
     *   }
     * })
     * 
    **/
    delete<T extends recipe_typeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, recipe_typeDeleteArgs<ExtArgs>>
    ): Prisma__recipe_typeClient<$Result.GetResult<Prisma.$recipe_typePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Recipe_type.
     * @param {recipe_typeUpdateArgs} args - Arguments to update one Recipe_type.
     * @example
     * // Update one Recipe_type
     * const recipe_type = await prisma.recipe_type.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends recipe_typeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, recipe_typeUpdateArgs<ExtArgs>>
    ): Prisma__recipe_typeClient<$Result.GetResult<Prisma.$recipe_typePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Recipe_types.
     * @param {recipe_typeDeleteManyArgs} args - Arguments to filter Recipe_types to delete.
     * @example
     * // Delete a few Recipe_types
     * const { count } = await prisma.recipe_type.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends recipe_typeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, recipe_typeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Recipe_types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {recipe_typeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Recipe_types
     * const recipe_type = await prisma.recipe_type.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends recipe_typeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, recipe_typeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Recipe_type.
     * @param {recipe_typeUpsertArgs} args - Arguments to update or create a Recipe_type.
     * @example
     * // Update or create a Recipe_type
     * const recipe_type = await prisma.recipe_type.upsert({
     *   create: {
     *     // ... data to create a Recipe_type
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Recipe_type we want to update
     *   }
     * })
    **/
    upsert<T extends recipe_typeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, recipe_typeUpsertArgs<ExtArgs>>
    ): Prisma__recipe_typeClient<$Result.GetResult<Prisma.$recipe_typePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Recipe_types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {recipe_typeCountArgs} args - Arguments to filter Recipe_types to count.
     * @example
     * // Count the number of Recipe_types
     * const count = await prisma.recipe_type.count({
     *   where: {
     *     // ... the filter for the Recipe_types we want to count
     *   }
     * })
    **/
    count<T extends recipe_typeCountArgs>(
      args?: Subset<T, recipe_typeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Recipe_typeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Recipe_type.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Recipe_typeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Recipe_typeAggregateArgs>(args: Subset<T, Recipe_typeAggregateArgs>): Prisma.PrismaPromise<GetRecipe_typeAggregateType<T>>

    /**
     * Group by Recipe_type.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {recipe_typeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends recipe_typeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: recipe_typeGroupByArgs['orderBy'] }
        : { orderBy?: recipe_typeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, recipe_typeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecipe_typeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the recipe_type model
   */
  readonly fields: recipe_typeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for recipe_type.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__recipe_typeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    recipes<T extends recipe_type$recipesArgs<ExtArgs> = {}>(args?: Subset<T, recipe_type$recipesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$recipePayload<ExtArgs>, T, 'findMany'> | Null>;

    posts<T extends recipe_type$postsArgs<ExtArgs> = {}>(args?: Subset<T, recipe_type$postsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$postPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the recipe_type model
   */ 
  interface recipe_typeFieldRefs {
    readonly id_recipe_type: FieldRef<"recipe_type", 'String'>
    readonly name: FieldRef<"recipe_type", 'String'>
  }
    

  // Custom InputTypes
  /**
   * recipe_type findUnique
   */
  export type recipe_typeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recipe_type
     */
    select?: recipe_typeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recipe_typeInclude<ExtArgs> | null
    /**
     * Filter, which recipe_type to fetch.
     */
    where: recipe_typeWhereUniqueInput
  }

  /**
   * recipe_type findUniqueOrThrow
   */
  export type recipe_typeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recipe_type
     */
    select?: recipe_typeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recipe_typeInclude<ExtArgs> | null
    /**
     * Filter, which recipe_type to fetch.
     */
    where: recipe_typeWhereUniqueInput
  }

  /**
   * recipe_type findFirst
   */
  export type recipe_typeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recipe_type
     */
    select?: recipe_typeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recipe_typeInclude<ExtArgs> | null
    /**
     * Filter, which recipe_type to fetch.
     */
    where?: recipe_typeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of recipe_types to fetch.
     */
    orderBy?: recipe_typeOrderByWithRelationInput | recipe_typeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for recipe_types.
     */
    cursor?: recipe_typeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` recipe_types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` recipe_types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of recipe_types.
     */
    distinct?: Recipe_typeScalarFieldEnum | Recipe_typeScalarFieldEnum[]
  }

  /**
   * recipe_type findFirstOrThrow
   */
  export type recipe_typeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recipe_type
     */
    select?: recipe_typeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recipe_typeInclude<ExtArgs> | null
    /**
     * Filter, which recipe_type to fetch.
     */
    where?: recipe_typeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of recipe_types to fetch.
     */
    orderBy?: recipe_typeOrderByWithRelationInput | recipe_typeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for recipe_types.
     */
    cursor?: recipe_typeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` recipe_types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` recipe_types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of recipe_types.
     */
    distinct?: Recipe_typeScalarFieldEnum | Recipe_typeScalarFieldEnum[]
  }

  /**
   * recipe_type findMany
   */
  export type recipe_typeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recipe_type
     */
    select?: recipe_typeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recipe_typeInclude<ExtArgs> | null
    /**
     * Filter, which recipe_types to fetch.
     */
    where?: recipe_typeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of recipe_types to fetch.
     */
    orderBy?: recipe_typeOrderByWithRelationInput | recipe_typeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing recipe_types.
     */
    cursor?: recipe_typeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` recipe_types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` recipe_types.
     */
    skip?: number
    distinct?: Recipe_typeScalarFieldEnum | Recipe_typeScalarFieldEnum[]
  }

  /**
   * recipe_type create
   */
  export type recipe_typeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recipe_type
     */
    select?: recipe_typeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recipe_typeInclude<ExtArgs> | null
    /**
     * The data needed to create a recipe_type.
     */
    data: XOR<recipe_typeCreateInput, recipe_typeUncheckedCreateInput>
  }

  /**
   * recipe_type createMany
   */
  export type recipe_typeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many recipe_types.
     */
    data: recipe_typeCreateManyInput | recipe_typeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * recipe_type update
   */
  export type recipe_typeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recipe_type
     */
    select?: recipe_typeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recipe_typeInclude<ExtArgs> | null
    /**
     * The data needed to update a recipe_type.
     */
    data: XOR<recipe_typeUpdateInput, recipe_typeUncheckedUpdateInput>
    /**
     * Choose, which recipe_type to update.
     */
    where: recipe_typeWhereUniqueInput
  }

  /**
   * recipe_type updateMany
   */
  export type recipe_typeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update recipe_types.
     */
    data: XOR<recipe_typeUpdateManyMutationInput, recipe_typeUncheckedUpdateManyInput>
    /**
     * Filter which recipe_types to update
     */
    where?: recipe_typeWhereInput
  }

  /**
   * recipe_type upsert
   */
  export type recipe_typeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recipe_type
     */
    select?: recipe_typeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recipe_typeInclude<ExtArgs> | null
    /**
     * The filter to search for the recipe_type to update in case it exists.
     */
    where: recipe_typeWhereUniqueInput
    /**
     * In case the recipe_type found by the `where` argument doesn't exist, create a new recipe_type with this data.
     */
    create: XOR<recipe_typeCreateInput, recipe_typeUncheckedCreateInput>
    /**
     * In case the recipe_type was found with the provided `where` argument, update it with this data.
     */
    update: XOR<recipe_typeUpdateInput, recipe_typeUncheckedUpdateInput>
  }

  /**
   * recipe_type delete
   */
  export type recipe_typeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recipe_type
     */
    select?: recipe_typeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recipe_typeInclude<ExtArgs> | null
    /**
     * Filter which recipe_type to delete.
     */
    where: recipe_typeWhereUniqueInput
  }

  /**
   * recipe_type deleteMany
   */
  export type recipe_typeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which recipe_types to delete
     */
    where?: recipe_typeWhereInput
  }

  /**
   * recipe_type.recipes
   */
  export type recipe_type$recipesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recipe
     */
    select?: recipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recipeInclude<ExtArgs> | null
    where?: recipeWhereInput
    orderBy?: recipeOrderByWithRelationInput | recipeOrderByWithRelationInput[]
    cursor?: recipeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecipeScalarFieldEnum | RecipeScalarFieldEnum[]
  }

  /**
   * recipe_type.posts
   */
  export type recipe_type$postsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post
     */
    select?: postSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postInclude<ExtArgs> | null
    where?: postWhereInput
    orderBy?: postOrderByWithRelationInput | postOrderByWithRelationInput[]
    cursor?: postWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * recipe_type without action
   */
  export type recipe_typeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recipe_type
     */
    select?: recipe_typeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recipe_typeInclude<ExtArgs> | null
  }


  /**
   * Model ingredient
   */

  export type AggregateIngredient = {
    _count: IngredientCountAggregateOutputType | null
    _min: IngredientMinAggregateOutputType | null
    _max: IngredientMaxAggregateOutputType | null
  }

  export type IngredientMinAggregateOutputType = {
    id_ingredient: string | null
    name: string | null
  }

  export type IngredientMaxAggregateOutputType = {
    id_ingredient: string | null
    name: string | null
  }

  export type IngredientCountAggregateOutputType = {
    id_ingredient: number
    name: number
    _all: number
  }


  export type IngredientMinAggregateInputType = {
    id_ingredient?: true
    name?: true
  }

  export type IngredientMaxAggregateInputType = {
    id_ingredient?: true
    name?: true
  }

  export type IngredientCountAggregateInputType = {
    id_ingredient?: true
    name?: true
    _all?: true
  }

  export type IngredientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ingredient to aggregate.
     */
    where?: ingredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ingredients to fetch.
     */
    orderBy?: ingredientOrderByWithRelationInput | ingredientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ingredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ingredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ingredients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ingredients
    **/
    _count?: true | IngredientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IngredientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IngredientMaxAggregateInputType
  }

  export type GetIngredientAggregateType<T extends IngredientAggregateArgs> = {
        [P in keyof T & keyof AggregateIngredient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIngredient[P]>
      : GetScalarType<T[P], AggregateIngredient[P]>
  }




  export type ingredientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ingredientWhereInput
    orderBy?: ingredientOrderByWithAggregationInput | ingredientOrderByWithAggregationInput[]
    by: IngredientScalarFieldEnum[] | IngredientScalarFieldEnum
    having?: ingredientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IngredientCountAggregateInputType | true
    _min?: IngredientMinAggregateInputType
    _max?: IngredientMaxAggregateInputType
  }

  export type IngredientGroupByOutputType = {
    id_ingredient: string
    name: string
    _count: IngredientCountAggregateOutputType | null
    _min: IngredientMinAggregateOutputType | null
    _max: IngredientMaxAggregateOutputType | null
  }

  type GetIngredientGroupByPayload<T extends ingredientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IngredientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IngredientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IngredientGroupByOutputType[P]>
            : GetScalarType<T[P], IngredientGroupByOutputType[P]>
        }
      >
    >


  export type ingredientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_ingredient?: boolean
    name?: boolean
    recipes?: boolean | ingredient$recipesArgs<ExtArgs>
    _count?: boolean | IngredientCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ingredient"]>

  export type ingredientSelectScalar = {
    id_ingredient?: boolean
    name?: boolean
  }


  export type ingredientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipes?: boolean | ingredient$recipesArgs<ExtArgs>
    _count?: boolean | IngredientCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ingredientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ingredient"
    objects: {
      recipes: Prisma.$ingredientinrecipePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_ingredient: string
      name: string
    }, ExtArgs["result"]["ingredient"]>
    composites: {}
  }


  type ingredientGetPayload<S extends boolean | null | undefined | ingredientDefaultArgs> = $Result.GetResult<Prisma.$ingredientPayload, S>

  type ingredientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ingredientFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: IngredientCountAggregateInputType | true
    }

  export interface ingredientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ingredient'], meta: { name: 'ingredient' } }
    /**
     * Find zero or one Ingredient that matches the filter.
     * @param {ingredientFindUniqueArgs} args - Arguments to find a Ingredient
     * @example
     * // Get one Ingredient
     * const ingredient = await prisma.ingredient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ingredientFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ingredientFindUniqueArgs<ExtArgs>>
    ): Prisma__ingredientClient<$Result.GetResult<Prisma.$ingredientPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Ingredient that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ingredientFindUniqueOrThrowArgs} args - Arguments to find a Ingredient
     * @example
     * // Get one Ingredient
     * const ingredient = await prisma.ingredient.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ingredientFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ingredientFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ingredientClient<$Result.GetResult<Prisma.$ingredientPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Ingredient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ingredientFindFirstArgs} args - Arguments to find a Ingredient
     * @example
     * // Get one Ingredient
     * const ingredient = await prisma.ingredient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ingredientFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ingredientFindFirstArgs<ExtArgs>>
    ): Prisma__ingredientClient<$Result.GetResult<Prisma.$ingredientPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Ingredient that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ingredientFindFirstOrThrowArgs} args - Arguments to find a Ingredient
     * @example
     * // Get one Ingredient
     * const ingredient = await prisma.ingredient.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ingredientFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ingredientFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ingredientClient<$Result.GetResult<Prisma.$ingredientPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Ingredients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ingredientFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ingredients
     * const ingredients = await prisma.ingredient.findMany()
     * 
     * // Get first 10 Ingredients
     * const ingredients = await prisma.ingredient.findMany({ take: 10 })
     * 
     * // Only select the `id_ingredient`
     * const ingredientWithId_ingredientOnly = await prisma.ingredient.findMany({ select: { id_ingredient: true } })
     * 
    **/
    findMany<T extends ingredientFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ingredientFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ingredientPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Ingredient.
     * @param {ingredientCreateArgs} args - Arguments to create a Ingredient.
     * @example
     * // Create one Ingredient
     * const Ingredient = await prisma.ingredient.create({
     *   data: {
     *     // ... data to create a Ingredient
     *   }
     * })
     * 
    **/
    create<T extends ingredientCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ingredientCreateArgs<ExtArgs>>
    ): Prisma__ingredientClient<$Result.GetResult<Prisma.$ingredientPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Ingredients.
     *     @param {ingredientCreateManyArgs} args - Arguments to create many Ingredients.
     *     @example
     *     // Create many Ingredients
     *     const ingredient = await prisma.ingredient.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ingredientCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ingredientCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Ingredient.
     * @param {ingredientDeleteArgs} args - Arguments to delete one Ingredient.
     * @example
     * // Delete one Ingredient
     * const Ingredient = await prisma.ingredient.delete({
     *   where: {
     *     // ... filter to delete one Ingredient
     *   }
     * })
     * 
    **/
    delete<T extends ingredientDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ingredientDeleteArgs<ExtArgs>>
    ): Prisma__ingredientClient<$Result.GetResult<Prisma.$ingredientPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Ingredient.
     * @param {ingredientUpdateArgs} args - Arguments to update one Ingredient.
     * @example
     * // Update one Ingredient
     * const ingredient = await prisma.ingredient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ingredientUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ingredientUpdateArgs<ExtArgs>>
    ): Prisma__ingredientClient<$Result.GetResult<Prisma.$ingredientPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Ingredients.
     * @param {ingredientDeleteManyArgs} args - Arguments to filter Ingredients to delete.
     * @example
     * // Delete a few Ingredients
     * const { count } = await prisma.ingredient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ingredientDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ingredientDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ingredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ingredientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ingredients
     * const ingredient = await prisma.ingredient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ingredientUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ingredientUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Ingredient.
     * @param {ingredientUpsertArgs} args - Arguments to update or create a Ingredient.
     * @example
     * // Update or create a Ingredient
     * const ingredient = await prisma.ingredient.upsert({
     *   create: {
     *     // ... data to create a Ingredient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ingredient we want to update
     *   }
     * })
    **/
    upsert<T extends ingredientUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ingredientUpsertArgs<ExtArgs>>
    ): Prisma__ingredientClient<$Result.GetResult<Prisma.$ingredientPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Ingredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ingredientCountArgs} args - Arguments to filter Ingredients to count.
     * @example
     * // Count the number of Ingredients
     * const count = await prisma.ingredient.count({
     *   where: {
     *     // ... the filter for the Ingredients we want to count
     *   }
     * })
    **/
    count<T extends ingredientCountArgs>(
      args?: Subset<T, ingredientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IngredientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ingredient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IngredientAggregateArgs>(args: Subset<T, IngredientAggregateArgs>): Prisma.PrismaPromise<GetIngredientAggregateType<T>>

    /**
     * Group by Ingredient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ingredientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ingredientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ingredientGroupByArgs['orderBy'] }
        : { orderBy?: ingredientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ingredientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIngredientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ingredient model
   */
  readonly fields: ingredientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ingredient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ingredientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    recipes<T extends ingredient$recipesArgs<ExtArgs> = {}>(args?: Subset<T, ingredient$recipesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ingredientinrecipePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ingredient model
   */ 
  interface ingredientFieldRefs {
    readonly id_ingredient: FieldRef<"ingredient", 'String'>
    readonly name: FieldRef<"ingredient", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ingredient findUnique
   */
  export type ingredientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ingredient
     */
    select?: ingredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ingredientInclude<ExtArgs> | null
    /**
     * Filter, which ingredient to fetch.
     */
    where: ingredientWhereUniqueInput
  }

  /**
   * ingredient findUniqueOrThrow
   */
  export type ingredientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ingredient
     */
    select?: ingredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ingredientInclude<ExtArgs> | null
    /**
     * Filter, which ingredient to fetch.
     */
    where: ingredientWhereUniqueInput
  }

  /**
   * ingredient findFirst
   */
  export type ingredientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ingredient
     */
    select?: ingredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ingredientInclude<ExtArgs> | null
    /**
     * Filter, which ingredient to fetch.
     */
    where?: ingredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ingredients to fetch.
     */
    orderBy?: ingredientOrderByWithRelationInput | ingredientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ingredients.
     */
    cursor?: ingredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ingredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ingredients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ingredients.
     */
    distinct?: IngredientScalarFieldEnum | IngredientScalarFieldEnum[]
  }

  /**
   * ingredient findFirstOrThrow
   */
  export type ingredientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ingredient
     */
    select?: ingredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ingredientInclude<ExtArgs> | null
    /**
     * Filter, which ingredient to fetch.
     */
    where?: ingredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ingredients to fetch.
     */
    orderBy?: ingredientOrderByWithRelationInput | ingredientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ingredients.
     */
    cursor?: ingredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ingredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ingredients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ingredients.
     */
    distinct?: IngredientScalarFieldEnum | IngredientScalarFieldEnum[]
  }

  /**
   * ingredient findMany
   */
  export type ingredientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ingredient
     */
    select?: ingredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ingredientInclude<ExtArgs> | null
    /**
     * Filter, which ingredients to fetch.
     */
    where?: ingredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ingredients to fetch.
     */
    orderBy?: ingredientOrderByWithRelationInput | ingredientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ingredients.
     */
    cursor?: ingredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ingredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ingredients.
     */
    skip?: number
    distinct?: IngredientScalarFieldEnum | IngredientScalarFieldEnum[]
  }

  /**
   * ingredient create
   */
  export type ingredientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ingredient
     */
    select?: ingredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ingredientInclude<ExtArgs> | null
    /**
     * The data needed to create a ingredient.
     */
    data: XOR<ingredientCreateInput, ingredientUncheckedCreateInput>
  }

  /**
   * ingredient createMany
   */
  export type ingredientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ingredients.
     */
    data: ingredientCreateManyInput | ingredientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ingredient update
   */
  export type ingredientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ingredient
     */
    select?: ingredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ingredientInclude<ExtArgs> | null
    /**
     * The data needed to update a ingredient.
     */
    data: XOR<ingredientUpdateInput, ingredientUncheckedUpdateInput>
    /**
     * Choose, which ingredient to update.
     */
    where: ingredientWhereUniqueInput
  }

  /**
   * ingredient updateMany
   */
  export type ingredientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ingredients.
     */
    data: XOR<ingredientUpdateManyMutationInput, ingredientUncheckedUpdateManyInput>
    /**
     * Filter which ingredients to update
     */
    where?: ingredientWhereInput
  }

  /**
   * ingredient upsert
   */
  export type ingredientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ingredient
     */
    select?: ingredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ingredientInclude<ExtArgs> | null
    /**
     * The filter to search for the ingredient to update in case it exists.
     */
    where: ingredientWhereUniqueInput
    /**
     * In case the ingredient found by the `where` argument doesn't exist, create a new ingredient with this data.
     */
    create: XOR<ingredientCreateInput, ingredientUncheckedCreateInput>
    /**
     * In case the ingredient was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ingredientUpdateInput, ingredientUncheckedUpdateInput>
  }

  /**
   * ingredient delete
   */
  export type ingredientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ingredient
     */
    select?: ingredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ingredientInclude<ExtArgs> | null
    /**
     * Filter which ingredient to delete.
     */
    where: ingredientWhereUniqueInput
  }

  /**
   * ingredient deleteMany
   */
  export type ingredientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ingredients to delete
     */
    where?: ingredientWhereInput
  }

  /**
   * ingredient.recipes
   */
  export type ingredient$recipesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ingredientinrecipe
     */
    select?: ingredientinrecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ingredientinrecipeInclude<ExtArgs> | null
    where?: ingredientinrecipeWhereInput
    orderBy?: ingredientinrecipeOrderByWithRelationInput | ingredientinrecipeOrderByWithRelationInput[]
    cursor?: ingredientinrecipeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IngredientinrecipeScalarFieldEnum | IngredientinrecipeScalarFieldEnum[]
  }

  /**
   * ingredient without action
   */
  export type ingredientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ingredient
     */
    select?: ingredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ingredientInclude<ExtArgs> | null
  }


  /**
   * Model ingredientinrecipe
   */

  export type AggregateIngredientinrecipe = {
    _count: IngredientinrecipeCountAggregateOutputType | null
    _avg: IngredientinrecipeAvgAggregateOutputType | null
    _sum: IngredientinrecipeSumAggregateOutputType | null
    _min: IngredientinrecipeMinAggregateOutputType | null
    _max: IngredientinrecipeMaxAggregateOutputType | null
  }

  export type IngredientinrecipeAvgAggregateOutputType = {
    quantity: number | null
  }

  export type IngredientinrecipeSumAggregateOutputType = {
    quantity: number | null
  }

  export type IngredientinrecipeMinAggregateOutputType = {
    id: string | null
    quantity: number | null
    unit: string | null
    recipeid: string | null
    ingredientid: string | null
  }

  export type IngredientinrecipeMaxAggregateOutputType = {
    id: string | null
    quantity: number | null
    unit: string | null
    recipeid: string | null
    ingredientid: string | null
  }

  export type IngredientinrecipeCountAggregateOutputType = {
    id: number
    quantity: number
    unit: number
    recipeid: number
    ingredientid: number
    _all: number
  }


  export type IngredientinrecipeAvgAggregateInputType = {
    quantity?: true
  }

  export type IngredientinrecipeSumAggregateInputType = {
    quantity?: true
  }

  export type IngredientinrecipeMinAggregateInputType = {
    id?: true
    quantity?: true
    unit?: true
    recipeid?: true
    ingredientid?: true
  }

  export type IngredientinrecipeMaxAggregateInputType = {
    id?: true
    quantity?: true
    unit?: true
    recipeid?: true
    ingredientid?: true
  }

  export type IngredientinrecipeCountAggregateInputType = {
    id?: true
    quantity?: true
    unit?: true
    recipeid?: true
    ingredientid?: true
    _all?: true
  }

  export type IngredientinrecipeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ingredientinrecipe to aggregate.
     */
    where?: ingredientinrecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ingredientinrecipes to fetch.
     */
    orderBy?: ingredientinrecipeOrderByWithRelationInput | ingredientinrecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ingredientinrecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ingredientinrecipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ingredientinrecipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ingredientinrecipes
    **/
    _count?: true | IngredientinrecipeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: IngredientinrecipeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: IngredientinrecipeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IngredientinrecipeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IngredientinrecipeMaxAggregateInputType
  }

  export type GetIngredientinrecipeAggregateType<T extends IngredientinrecipeAggregateArgs> = {
        [P in keyof T & keyof AggregateIngredientinrecipe]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIngredientinrecipe[P]>
      : GetScalarType<T[P], AggregateIngredientinrecipe[P]>
  }




  export type ingredientinrecipeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ingredientinrecipeWhereInput
    orderBy?: ingredientinrecipeOrderByWithAggregationInput | ingredientinrecipeOrderByWithAggregationInput[]
    by: IngredientinrecipeScalarFieldEnum[] | IngredientinrecipeScalarFieldEnum
    having?: ingredientinrecipeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IngredientinrecipeCountAggregateInputType | true
    _avg?: IngredientinrecipeAvgAggregateInputType
    _sum?: IngredientinrecipeSumAggregateInputType
    _min?: IngredientinrecipeMinAggregateInputType
    _max?: IngredientinrecipeMaxAggregateInputType
  }

  export type IngredientinrecipeGroupByOutputType = {
    id: string
    quantity: number
    unit: string
    recipeid: string
    ingredientid: string
    _count: IngredientinrecipeCountAggregateOutputType | null
    _avg: IngredientinrecipeAvgAggregateOutputType | null
    _sum: IngredientinrecipeSumAggregateOutputType | null
    _min: IngredientinrecipeMinAggregateOutputType | null
    _max: IngredientinrecipeMaxAggregateOutputType | null
  }

  type GetIngredientinrecipeGroupByPayload<T extends ingredientinrecipeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IngredientinrecipeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IngredientinrecipeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IngredientinrecipeGroupByOutputType[P]>
            : GetScalarType<T[P], IngredientinrecipeGroupByOutputType[P]>
        }
      >
    >


  export type ingredientinrecipeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    quantity?: boolean
    unit?: boolean
    recipeid?: boolean
    ingredientid?: boolean
    recipe?: boolean | recipeDefaultArgs<ExtArgs>
    ingredient?: boolean | ingredientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ingredientinrecipe"]>

  export type ingredientinrecipeSelectScalar = {
    id?: boolean
    quantity?: boolean
    unit?: boolean
    recipeid?: boolean
    ingredientid?: boolean
  }


  export type ingredientinrecipeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipe?: boolean | recipeDefaultArgs<ExtArgs>
    ingredient?: boolean | ingredientDefaultArgs<ExtArgs>
  }


  export type $ingredientinrecipePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ingredientinrecipe"
    objects: {
      recipe: Prisma.$recipePayload<ExtArgs>
      ingredient: Prisma.$ingredientPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      quantity: number
      unit: string
      recipeid: string
      ingredientid: string
    }, ExtArgs["result"]["ingredientinrecipe"]>
    composites: {}
  }


  type ingredientinrecipeGetPayload<S extends boolean | null | undefined | ingredientinrecipeDefaultArgs> = $Result.GetResult<Prisma.$ingredientinrecipePayload, S>

  type ingredientinrecipeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ingredientinrecipeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: IngredientinrecipeCountAggregateInputType | true
    }

  export interface ingredientinrecipeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ingredientinrecipe'], meta: { name: 'ingredientinrecipe' } }
    /**
     * Find zero or one Ingredientinrecipe that matches the filter.
     * @param {ingredientinrecipeFindUniqueArgs} args - Arguments to find a Ingredientinrecipe
     * @example
     * // Get one Ingredientinrecipe
     * const ingredientinrecipe = await prisma.ingredientinrecipe.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ingredientinrecipeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ingredientinrecipeFindUniqueArgs<ExtArgs>>
    ): Prisma__ingredientinrecipeClient<$Result.GetResult<Prisma.$ingredientinrecipePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Ingredientinrecipe that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ingredientinrecipeFindUniqueOrThrowArgs} args - Arguments to find a Ingredientinrecipe
     * @example
     * // Get one Ingredientinrecipe
     * const ingredientinrecipe = await prisma.ingredientinrecipe.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ingredientinrecipeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ingredientinrecipeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ingredientinrecipeClient<$Result.GetResult<Prisma.$ingredientinrecipePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Ingredientinrecipe that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ingredientinrecipeFindFirstArgs} args - Arguments to find a Ingredientinrecipe
     * @example
     * // Get one Ingredientinrecipe
     * const ingredientinrecipe = await prisma.ingredientinrecipe.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ingredientinrecipeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ingredientinrecipeFindFirstArgs<ExtArgs>>
    ): Prisma__ingredientinrecipeClient<$Result.GetResult<Prisma.$ingredientinrecipePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Ingredientinrecipe that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ingredientinrecipeFindFirstOrThrowArgs} args - Arguments to find a Ingredientinrecipe
     * @example
     * // Get one Ingredientinrecipe
     * const ingredientinrecipe = await prisma.ingredientinrecipe.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ingredientinrecipeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ingredientinrecipeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ingredientinrecipeClient<$Result.GetResult<Prisma.$ingredientinrecipePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Ingredientinrecipes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ingredientinrecipeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ingredientinrecipes
     * const ingredientinrecipes = await prisma.ingredientinrecipe.findMany()
     * 
     * // Get first 10 Ingredientinrecipes
     * const ingredientinrecipes = await prisma.ingredientinrecipe.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ingredientinrecipeWithIdOnly = await prisma.ingredientinrecipe.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ingredientinrecipeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ingredientinrecipeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ingredientinrecipePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Ingredientinrecipe.
     * @param {ingredientinrecipeCreateArgs} args - Arguments to create a Ingredientinrecipe.
     * @example
     * // Create one Ingredientinrecipe
     * const Ingredientinrecipe = await prisma.ingredientinrecipe.create({
     *   data: {
     *     // ... data to create a Ingredientinrecipe
     *   }
     * })
     * 
    **/
    create<T extends ingredientinrecipeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ingredientinrecipeCreateArgs<ExtArgs>>
    ): Prisma__ingredientinrecipeClient<$Result.GetResult<Prisma.$ingredientinrecipePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Ingredientinrecipes.
     *     @param {ingredientinrecipeCreateManyArgs} args - Arguments to create many Ingredientinrecipes.
     *     @example
     *     // Create many Ingredientinrecipes
     *     const ingredientinrecipe = await prisma.ingredientinrecipe.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ingredientinrecipeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ingredientinrecipeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Ingredientinrecipe.
     * @param {ingredientinrecipeDeleteArgs} args - Arguments to delete one Ingredientinrecipe.
     * @example
     * // Delete one Ingredientinrecipe
     * const Ingredientinrecipe = await prisma.ingredientinrecipe.delete({
     *   where: {
     *     // ... filter to delete one Ingredientinrecipe
     *   }
     * })
     * 
    **/
    delete<T extends ingredientinrecipeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ingredientinrecipeDeleteArgs<ExtArgs>>
    ): Prisma__ingredientinrecipeClient<$Result.GetResult<Prisma.$ingredientinrecipePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Ingredientinrecipe.
     * @param {ingredientinrecipeUpdateArgs} args - Arguments to update one Ingredientinrecipe.
     * @example
     * // Update one Ingredientinrecipe
     * const ingredientinrecipe = await prisma.ingredientinrecipe.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ingredientinrecipeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ingredientinrecipeUpdateArgs<ExtArgs>>
    ): Prisma__ingredientinrecipeClient<$Result.GetResult<Prisma.$ingredientinrecipePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Ingredientinrecipes.
     * @param {ingredientinrecipeDeleteManyArgs} args - Arguments to filter Ingredientinrecipes to delete.
     * @example
     * // Delete a few Ingredientinrecipes
     * const { count } = await prisma.ingredientinrecipe.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ingredientinrecipeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ingredientinrecipeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ingredientinrecipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ingredientinrecipeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ingredientinrecipes
     * const ingredientinrecipe = await prisma.ingredientinrecipe.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ingredientinrecipeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ingredientinrecipeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Ingredientinrecipe.
     * @param {ingredientinrecipeUpsertArgs} args - Arguments to update or create a Ingredientinrecipe.
     * @example
     * // Update or create a Ingredientinrecipe
     * const ingredientinrecipe = await prisma.ingredientinrecipe.upsert({
     *   create: {
     *     // ... data to create a Ingredientinrecipe
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ingredientinrecipe we want to update
     *   }
     * })
    **/
    upsert<T extends ingredientinrecipeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ingredientinrecipeUpsertArgs<ExtArgs>>
    ): Prisma__ingredientinrecipeClient<$Result.GetResult<Prisma.$ingredientinrecipePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Ingredientinrecipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ingredientinrecipeCountArgs} args - Arguments to filter Ingredientinrecipes to count.
     * @example
     * // Count the number of Ingredientinrecipes
     * const count = await prisma.ingredientinrecipe.count({
     *   where: {
     *     // ... the filter for the Ingredientinrecipes we want to count
     *   }
     * })
    **/
    count<T extends ingredientinrecipeCountArgs>(
      args?: Subset<T, ingredientinrecipeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IngredientinrecipeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ingredientinrecipe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientinrecipeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IngredientinrecipeAggregateArgs>(args: Subset<T, IngredientinrecipeAggregateArgs>): Prisma.PrismaPromise<GetIngredientinrecipeAggregateType<T>>

    /**
     * Group by Ingredientinrecipe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ingredientinrecipeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ingredientinrecipeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ingredientinrecipeGroupByArgs['orderBy'] }
        : { orderBy?: ingredientinrecipeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ingredientinrecipeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIngredientinrecipeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ingredientinrecipe model
   */
  readonly fields: ingredientinrecipeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ingredientinrecipe.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ingredientinrecipeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    recipe<T extends recipeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, recipeDefaultArgs<ExtArgs>>): Prisma__recipeClient<$Result.GetResult<Prisma.$recipePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    ingredient<T extends ingredientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ingredientDefaultArgs<ExtArgs>>): Prisma__ingredientClient<$Result.GetResult<Prisma.$ingredientPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ingredientinrecipe model
   */ 
  interface ingredientinrecipeFieldRefs {
    readonly id: FieldRef<"ingredientinrecipe", 'String'>
    readonly quantity: FieldRef<"ingredientinrecipe", 'Int'>
    readonly unit: FieldRef<"ingredientinrecipe", 'String'>
    readonly recipeid: FieldRef<"ingredientinrecipe", 'String'>
    readonly ingredientid: FieldRef<"ingredientinrecipe", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ingredientinrecipe findUnique
   */
  export type ingredientinrecipeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ingredientinrecipe
     */
    select?: ingredientinrecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ingredientinrecipeInclude<ExtArgs> | null
    /**
     * Filter, which ingredientinrecipe to fetch.
     */
    where: ingredientinrecipeWhereUniqueInput
  }

  /**
   * ingredientinrecipe findUniqueOrThrow
   */
  export type ingredientinrecipeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ingredientinrecipe
     */
    select?: ingredientinrecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ingredientinrecipeInclude<ExtArgs> | null
    /**
     * Filter, which ingredientinrecipe to fetch.
     */
    where: ingredientinrecipeWhereUniqueInput
  }

  /**
   * ingredientinrecipe findFirst
   */
  export type ingredientinrecipeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ingredientinrecipe
     */
    select?: ingredientinrecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ingredientinrecipeInclude<ExtArgs> | null
    /**
     * Filter, which ingredientinrecipe to fetch.
     */
    where?: ingredientinrecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ingredientinrecipes to fetch.
     */
    orderBy?: ingredientinrecipeOrderByWithRelationInput | ingredientinrecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ingredientinrecipes.
     */
    cursor?: ingredientinrecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ingredientinrecipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ingredientinrecipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ingredientinrecipes.
     */
    distinct?: IngredientinrecipeScalarFieldEnum | IngredientinrecipeScalarFieldEnum[]
  }

  /**
   * ingredientinrecipe findFirstOrThrow
   */
  export type ingredientinrecipeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ingredientinrecipe
     */
    select?: ingredientinrecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ingredientinrecipeInclude<ExtArgs> | null
    /**
     * Filter, which ingredientinrecipe to fetch.
     */
    where?: ingredientinrecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ingredientinrecipes to fetch.
     */
    orderBy?: ingredientinrecipeOrderByWithRelationInput | ingredientinrecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ingredientinrecipes.
     */
    cursor?: ingredientinrecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ingredientinrecipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ingredientinrecipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ingredientinrecipes.
     */
    distinct?: IngredientinrecipeScalarFieldEnum | IngredientinrecipeScalarFieldEnum[]
  }

  /**
   * ingredientinrecipe findMany
   */
  export type ingredientinrecipeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ingredientinrecipe
     */
    select?: ingredientinrecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ingredientinrecipeInclude<ExtArgs> | null
    /**
     * Filter, which ingredientinrecipes to fetch.
     */
    where?: ingredientinrecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ingredientinrecipes to fetch.
     */
    orderBy?: ingredientinrecipeOrderByWithRelationInput | ingredientinrecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ingredientinrecipes.
     */
    cursor?: ingredientinrecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ingredientinrecipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ingredientinrecipes.
     */
    skip?: number
    distinct?: IngredientinrecipeScalarFieldEnum | IngredientinrecipeScalarFieldEnum[]
  }

  /**
   * ingredientinrecipe create
   */
  export type ingredientinrecipeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ingredientinrecipe
     */
    select?: ingredientinrecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ingredientinrecipeInclude<ExtArgs> | null
    /**
     * The data needed to create a ingredientinrecipe.
     */
    data: XOR<ingredientinrecipeCreateInput, ingredientinrecipeUncheckedCreateInput>
  }

  /**
   * ingredientinrecipe createMany
   */
  export type ingredientinrecipeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ingredientinrecipes.
     */
    data: ingredientinrecipeCreateManyInput | ingredientinrecipeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ingredientinrecipe update
   */
  export type ingredientinrecipeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ingredientinrecipe
     */
    select?: ingredientinrecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ingredientinrecipeInclude<ExtArgs> | null
    /**
     * The data needed to update a ingredientinrecipe.
     */
    data: XOR<ingredientinrecipeUpdateInput, ingredientinrecipeUncheckedUpdateInput>
    /**
     * Choose, which ingredientinrecipe to update.
     */
    where: ingredientinrecipeWhereUniqueInput
  }

  /**
   * ingredientinrecipe updateMany
   */
  export type ingredientinrecipeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ingredientinrecipes.
     */
    data: XOR<ingredientinrecipeUpdateManyMutationInput, ingredientinrecipeUncheckedUpdateManyInput>
    /**
     * Filter which ingredientinrecipes to update
     */
    where?: ingredientinrecipeWhereInput
  }

  /**
   * ingredientinrecipe upsert
   */
  export type ingredientinrecipeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ingredientinrecipe
     */
    select?: ingredientinrecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ingredientinrecipeInclude<ExtArgs> | null
    /**
     * The filter to search for the ingredientinrecipe to update in case it exists.
     */
    where: ingredientinrecipeWhereUniqueInput
    /**
     * In case the ingredientinrecipe found by the `where` argument doesn't exist, create a new ingredientinrecipe with this data.
     */
    create: XOR<ingredientinrecipeCreateInput, ingredientinrecipeUncheckedCreateInput>
    /**
     * In case the ingredientinrecipe was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ingredientinrecipeUpdateInput, ingredientinrecipeUncheckedUpdateInput>
  }

  /**
   * ingredientinrecipe delete
   */
  export type ingredientinrecipeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ingredientinrecipe
     */
    select?: ingredientinrecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ingredientinrecipeInclude<ExtArgs> | null
    /**
     * Filter which ingredientinrecipe to delete.
     */
    where: ingredientinrecipeWhereUniqueInput
  }

  /**
   * ingredientinrecipe deleteMany
   */
  export type ingredientinrecipeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ingredientinrecipes to delete
     */
    where?: ingredientinrecipeWhereInput
  }

  /**
   * ingredientinrecipe without action
   */
  export type ingredientinrecipeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ingredientinrecipe
     */
    select?: ingredientinrecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ingredientinrecipeInclude<ExtArgs> | null
  }


  /**
   * Model post
   */

  export type AggregatePost = {
    _count: PostCountAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  export type PostMinAggregateOutputType = {
    id_post: string | null
    title: string | null
    content: string | null
    date: Date | null
    iduser: string | null
    idrecipe: string | null
    recipetypeid: string | null
  }

  export type PostMaxAggregateOutputType = {
    id_post: string | null
    title: string | null
    content: string | null
    date: Date | null
    iduser: string | null
    idrecipe: string | null
    recipetypeid: string | null
  }

  export type PostCountAggregateOutputType = {
    id_post: number
    title: number
    content: number
    date: number
    iduser: number
    idrecipe: number
    recipetypeid: number
    _all: number
  }


  export type PostMinAggregateInputType = {
    id_post?: true
    title?: true
    content?: true
    date?: true
    iduser?: true
    idrecipe?: true
    recipetypeid?: true
  }

  export type PostMaxAggregateInputType = {
    id_post?: true
    title?: true
    content?: true
    date?: true
    iduser?: true
    idrecipe?: true
    recipetypeid?: true
  }

  export type PostCountAggregateInputType = {
    id_post?: true
    title?: true
    content?: true
    date?: true
    iduser?: true
    idrecipe?: true
    recipetypeid?: true
    _all?: true
  }

  export type PostAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which post to aggregate.
     */
    where?: postWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of posts to fetch.
     */
    orderBy?: postOrderByWithRelationInput | postOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: postWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned posts
    **/
    _count?: true | PostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostMaxAggregateInputType
  }

  export type GetPostAggregateType<T extends PostAggregateArgs> = {
        [P in keyof T & keyof AggregatePost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePost[P]>
      : GetScalarType<T[P], AggregatePost[P]>
  }




  export type postGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: postWhereInput
    orderBy?: postOrderByWithAggregationInput | postOrderByWithAggregationInput[]
    by: PostScalarFieldEnum[] | PostScalarFieldEnum
    having?: postScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostCountAggregateInputType | true
    _min?: PostMinAggregateInputType
    _max?: PostMaxAggregateInputType
  }

  export type PostGroupByOutputType = {
    id_post: string
    title: string
    content: string
    date: Date
    iduser: string
    idrecipe: string
    recipetypeid: string
    _count: PostCountAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  type GetPostGroupByPayload<T extends postGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostGroupByOutputType[P]>
            : GetScalarType<T[P], PostGroupByOutputType[P]>
        }
      >
    >


  export type postSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_post?: boolean
    title?: boolean
    content?: boolean
    date?: boolean
    iduser?: boolean
    idrecipe?: boolean
    recipetypeid?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
    recipe?: boolean | recipeDefaultArgs<ExtArgs>
    recipetype?: boolean | recipe_typeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post"]>

  export type postSelectScalar = {
    id_post?: boolean
    title?: boolean
    content?: boolean
    date?: boolean
    iduser?: boolean
    idrecipe?: boolean
    recipetypeid?: boolean
  }


  export type postInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
    recipe?: boolean | recipeDefaultArgs<ExtArgs>
    recipetype?: boolean | recipe_typeDefaultArgs<ExtArgs>
  }


  export type $postPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "post"
    objects: {
      user: Prisma.$userPayload<ExtArgs>
      recipe: Prisma.$recipePayload<ExtArgs>
      recipetype: Prisma.$recipe_typePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id_post: string
      title: string
      content: string
      date: Date
      iduser: string
      idrecipe: string
      recipetypeid: string
    }, ExtArgs["result"]["post"]>
    composites: {}
  }


  type postGetPayload<S extends boolean | null | undefined | postDefaultArgs> = $Result.GetResult<Prisma.$postPayload, S>

  type postCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<postFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PostCountAggregateInputType | true
    }

  export interface postDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['post'], meta: { name: 'post' } }
    /**
     * Find zero or one Post that matches the filter.
     * @param {postFindUniqueArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends postFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, postFindUniqueArgs<ExtArgs>>
    ): Prisma__postClient<$Result.GetResult<Prisma.$postPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Post that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {postFindUniqueOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends postFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, postFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__postClient<$Result.GetResult<Prisma.$postPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Post that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postFindFirstArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends postFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, postFindFirstArgs<ExtArgs>>
    ): Prisma__postClient<$Result.GetResult<Prisma.$postPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Post that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postFindFirstOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends postFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, postFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__postClient<$Result.GetResult<Prisma.$postPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Posts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Posts
     * const posts = await prisma.post.findMany()
     * 
     * // Get first 10 Posts
     * const posts = await prisma.post.findMany({ take: 10 })
     * 
     * // Only select the `id_post`
     * const postWithId_postOnly = await prisma.post.findMany({ select: { id_post: true } })
     * 
    **/
    findMany<T extends postFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, postFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$postPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Post.
     * @param {postCreateArgs} args - Arguments to create a Post.
     * @example
     * // Create one Post
     * const Post = await prisma.post.create({
     *   data: {
     *     // ... data to create a Post
     *   }
     * })
     * 
    **/
    create<T extends postCreateArgs<ExtArgs>>(
      args: SelectSubset<T, postCreateArgs<ExtArgs>>
    ): Prisma__postClient<$Result.GetResult<Prisma.$postPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Posts.
     *     @param {postCreateManyArgs} args - Arguments to create many Posts.
     *     @example
     *     // Create many Posts
     *     const post = await prisma.post.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends postCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, postCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Post.
     * @param {postDeleteArgs} args - Arguments to delete one Post.
     * @example
     * // Delete one Post
     * const Post = await prisma.post.delete({
     *   where: {
     *     // ... filter to delete one Post
     *   }
     * })
     * 
    **/
    delete<T extends postDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, postDeleteArgs<ExtArgs>>
    ): Prisma__postClient<$Result.GetResult<Prisma.$postPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Post.
     * @param {postUpdateArgs} args - Arguments to update one Post.
     * @example
     * // Update one Post
     * const post = await prisma.post.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends postUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, postUpdateArgs<ExtArgs>>
    ): Prisma__postClient<$Result.GetResult<Prisma.$postPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Posts.
     * @param {postDeleteManyArgs} args - Arguments to filter Posts to delete.
     * @example
     * // Delete a few Posts
     * const { count } = await prisma.post.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends postDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, postDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Posts
     * const post = await prisma.post.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends postUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, postUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Post.
     * @param {postUpsertArgs} args - Arguments to update or create a Post.
     * @example
     * // Update or create a Post
     * const post = await prisma.post.upsert({
     *   create: {
     *     // ... data to create a Post
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Post we want to update
     *   }
     * })
    **/
    upsert<T extends postUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, postUpsertArgs<ExtArgs>>
    ): Prisma__postClient<$Result.GetResult<Prisma.$postPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postCountArgs} args - Arguments to filter Posts to count.
     * @example
     * // Count the number of Posts
     * const count = await prisma.post.count({
     *   where: {
     *     // ... the filter for the Posts we want to count
     *   }
     * })
    **/
    count<T extends postCountArgs>(
      args?: Subset<T, postCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostAggregateArgs>(args: Subset<T, PostAggregateArgs>): Prisma.PrismaPromise<GetPostAggregateType<T>>

    /**
     * Group by Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends postGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: postGroupByArgs['orderBy'] }
        : { orderBy?: postGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, postGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the post model
   */
  readonly fields: postFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for post.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__postClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    recipe<T extends recipeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, recipeDefaultArgs<ExtArgs>>): Prisma__recipeClient<$Result.GetResult<Prisma.$recipePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    recipetype<T extends recipe_typeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, recipe_typeDefaultArgs<ExtArgs>>): Prisma__recipe_typeClient<$Result.GetResult<Prisma.$recipe_typePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the post model
   */ 
  interface postFieldRefs {
    readonly id_post: FieldRef<"post", 'String'>
    readonly title: FieldRef<"post", 'String'>
    readonly content: FieldRef<"post", 'String'>
    readonly date: FieldRef<"post", 'DateTime'>
    readonly iduser: FieldRef<"post", 'String'>
    readonly idrecipe: FieldRef<"post", 'String'>
    readonly recipetypeid: FieldRef<"post", 'String'>
  }
    

  // Custom InputTypes
  /**
   * post findUnique
   */
  export type postFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post
     */
    select?: postSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postInclude<ExtArgs> | null
    /**
     * Filter, which post to fetch.
     */
    where: postWhereUniqueInput
  }

  /**
   * post findUniqueOrThrow
   */
  export type postFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post
     */
    select?: postSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postInclude<ExtArgs> | null
    /**
     * Filter, which post to fetch.
     */
    where: postWhereUniqueInput
  }

  /**
   * post findFirst
   */
  export type postFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post
     */
    select?: postSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postInclude<ExtArgs> | null
    /**
     * Filter, which post to fetch.
     */
    where?: postWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of posts to fetch.
     */
    orderBy?: postOrderByWithRelationInput | postOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for posts.
     */
    cursor?: postWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of posts.
     */
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * post findFirstOrThrow
   */
  export type postFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post
     */
    select?: postSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postInclude<ExtArgs> | null
    /**
     * Filter, which post to fetch.
     */
    where?: postWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of posts to fetch.
     */
    orderBy?: postOrderByWithRelationInput | postOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for posts.
     */
    cursor?: postWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of posts.
     */
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * post findMany
   */
  export type postFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post
     */
    select?: postSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postInclude<ExtArgs> | null
    /**
     * Filter, which posts to fetch.
     */
    where?: postWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of posts to fetch.
     */
    orderBy?: postOrderByWithRelationInput | postOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing posts.
     */
    cursor?: postWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` posts.
     */
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * post create
   */
  export type postCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post
     */
    select?: postSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postInclude<ExtArgs> | null
    /**
     * The data needed to create a post.
     */
    data: XOR<postCreateInput, postUncheckedCreateInput>
  }

  /**
   * post createMany
   */
  export type postCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many posts.
     */
    data: postCreateManyInput | postCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * post update
   */
  export type postUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post
     */
    select?: postSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postInclude<ExtArgs> | null
    /**
     * The data needed to update a post.
     */
    data: XOR<postUpdateInput, postUncheckedUpdateInput>
    /**
     * Choose, which post to update.
     */
    where: postWhereUniqueInput
  }

  /**
   * post updateMany
   */
  export type postUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update posts.
     */
    data: XOR<postUpdateManyMutationInput, postUncheckedUpdateManyInput>
    /**
     * Filter which posts to update
     */
    where?: postWhereInput
  }

  /**
   * post upsert
   */
  export type postUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post
     */
    select?: postSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postInclude<ExtArgs> | null
    /**
     * The filter to search for the post to update in case it exists.
     */
    where: postWhereUniqueInput
    /**
     * In case the post found by the `where` argument doesn't exist, create a new post with this data.
     */
    create: XOR<postCreateInput, postUncheckedCreateInput>
    /**
     * In case the post was found with the provided `where` argument, update it with this data.
     */
    update: XOR<postUpdateInput, postUncheckedUpdateInput>
  }

  /**
   * post delete
   */
  export type postDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post
     */
    select?: postSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postInclude<ExtArgs> | null
    /**
     * Filter which post to delete.
     */
    where: postWhereUniqueInput
  }

  /**
   * post deleteMany
   */
  export type postDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which posts to delete
     */
    where?: postWhereInput
  }

  /**
   * post without action
   */
  export type postDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post
     */
    select?: postSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    pseudo: 'pseudo',
    password: 'password',
    email: 'email',
    isadmin: 'isadmin'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const RecipeScalarFieldEnum: {
    id_recipe: 'id_recipe',
    time_of_preparation: 'time_of_preparation',
    name: 'name',
    description: 'description',
    number_of_person: 'number_of_person',
    photo: 'photo',
    recipetypeid: 'recipetypeid'
  };

  export type RecipeScalarFieldEnum = (typeof RecipeScalarFieldEnum)[keyof typeof RecipeScalarFieldEnum]


  export const Recipe_typeScalarFieldEnum: {
    id_recipe_type: 'id_recipe_type',
    name: 'name'
  };

  export type Recipe_typeScalarFieldEnum = (typeof Recipe_typeScalarFieldEnum)[keyof typeof Recipe_typeScalarFieldEnum]


  export const IngredientScalarFieldEnum: {
    id_ingredient: 'id_ingredient',
    name: 'name'
  };

  export type IngredientScalarFieldEnum = (typeof IngredientScalarFieldEnum)[keyof typeof IngredientScalarFieldEnum]


  export const IngredientinrecipeScalarFieldEnum: {
    id: 'id',
    quantity: 'quantity',
    unit: 'unit',
    recipeid: 'recipeid',
    ingredientid: 'ingredientid'
  };

  export type IngredientinrecipeScalarFieldEnum = (typeof IngredientinrecipeScalarFieldEnum)[keyof typeof IngredientinrecipeScalarFieldEnum]


  export const PostScalarFieldEnum: {
    id_post: 'id_post',
    title: 'title',
    content: 'content',
    date: 'date',
    iduser: 'iduser',
    idrecipe: 'idrecipe',
    recipetypeid: 'recipetypeid'
  };

  export type PostScalarFieldEnum = (typeof PostScalarFieldEnum)[keyof typeof PostScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type userWhereInput = {
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    id?: StringFilter<"user"> | string
    pseudo?: StringFilter<"user"> | string
    password?: StringFilter<"user"> | string
    email?: StringFilter<"user"> | string
    isadmin?: BoolFilter<"user"> | boolean
    posts?: PostListRelationFilter
  }

  export type userOrderByWithRelationInput = {
    id?: SortOrder
    pseudo?: SortOrder
    password?: SortOrder
    email?: SortOrder
    isadmin?: SortOrder
    posts?: postOrderByRelationAggregateInput
  }

  export type userWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    pseudo?: StringFilter<"user"> | string
    password?: StringFilter<"user"> | string
    isadmin?: BoolFilter<"user"> | boolean
    posts?: PostListRelationFilter
  }, "id" | "email">

  export type userOrderByWithAggregationInput = {
    id?: SortOrder
    pseudo?: SortOrder
    password?: SortOrder
    email?: SortOrder
    isadmin?: SortOrder
    _count?: userCountOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    OR?: userScalarWhereWithAggregatesInput[]
    NOT?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"user"> | string
    pseudo?: StringWithAggregatesFilter<"user"> | string
    password?: StringWithAggregatesFilter<"user"> | string
    email?: StringWithAggregatesFilter<"user"> | string
    isadmin?: BoolWithAggregatesFilter<"user"> | boolean
  }

  export type recipeWhereInput = {
    AND?: recipeWhereInput | recipeWhereInput[]
    OR?: recipeWhereInput[]
    NOT?: recipeWhereInput | recipeWhereInput[]
    id_recipe?: StringFilter<"recipe"> | string
    time_of_preparation?: IntFilter<"recipe"> | number
    name?: StringFilter<"recipe"> | string
    description?: StringNullableFilter<"recipe"> | string | null
    number_of_person?: IntFilter<"recipe"> | number
    photo?: StringNullableFilter<"recipe"> | string | null
    recipetypeid?: StringFilter<"recipe"> | string
    ingredients?: IngredientinrecipeListRelationFilter
    posts?: PostListRelationFilter
    recipetype?: XOR<Recipe_typeRelationFilter, recipe_typeWhereInput>
  }

  export type recipeOrderByWithRelationInput = {
    id_recipe?: SortOrder
    time_of_preparation?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    number_of_person?: SortOrder
    photo?: SortOrderInput | SortOrder
    recipetypeid?: SortOrder
    ingredients?: ingredientinrecipeOrderByRelationAggregateInput
    posts?: postOrderByRelationAggregateInput
    recipetype?: recipe_typeOrderByWithRelationInput
  }

  export type recipeWhereUniqueInput = Prisma.AtLeast<{
    id_recipe?: string
    AND?: recipeWhereInput | recipeWhereInput[]
    OR?: recipeWhereInput[]
    NOT?: recipeWhereInput | recipeWhereInput[]
    time_of_preparation?: IntFilter<"recipe"> | number
    name?: StringFilter<"recipe"> | string
    description?: StringNullableFilter<"recipe"> | string | null
    number_of_person?: IntFilter<"recipe"> | number
    photo?: StringNullableFilter<"recipe"> | string | null
    recipetypeid?: StringFilter<"recipe"> | string
    ingredients?: IngredientinrecipeListRelationFilter
    posts?: PostListRelationFilter
    recipetype?: XOR<Recipe_typeRelationFilter, recipe_typeWhereInput>
  }, "id_recipe">

  export type recipeOrderByWithAggregationInput = {
    id_recipe?: SortOrder
    time_of_preparation?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    number_of_person?: SortOrder
    photo?: SortOrderInput | SortOrder
    recipetypeid?: SortOrder
    _count?: recipeCountOrderByAggregateInput
    _avg?: recipeAvgOrderByAggregateInput
    _max?: recipeMaxOrderByAggregateInput
    _min?: recipeMinOrderByAggregateInput
    _sum?: recipeSumOrderByAggregateInput
  }

  export type recipeScalarWhereWithAggregatesInput = {
    AND?: recipeScalarWhereWithAggregatesInput | recipeScalarWhereWithAggregatesInput[]
    OR?: recipeScalarWhereWithAggregatesInput[]
    NOT?: recipeScalarWhereWithAggregatesInput | recipeScalarWhereWithAggregatesInput[]
    id_recipe?: StringWithAggregatesFilter<"recipe"> | string
    time_of_preparation?: IntWithAggregatesFilter<"recipe"> | number
    name?: StringWithAggregatesFilter<"recipe"> | string
    description?: StringNullableWithAggregatesFilter<"recipe"> | string | null
    number_of_person?: IntWithAggregatesFilter<"recipe"> | number
    photo?: StringNullableWithAggregatesFilter<"recipe"> | string | null
    recipetypeid?: StringWithAggregatesFilter<"recipe"> | string
  }

  export type recipe_typeWhereInput = {
    AND?: recipe_typeWhereInput | recipe_typeWhereInput[]
    OR?: recipe_typeWhereInput[]
    NOT?: recipe_typeWhereInput | recipe_typeWhereInput[]
    id_recipe_type?: StringFilter<"recipe_type"> | string
    name?: StringFilter<"recipe_type"> | string
    recipes?: RecipeListRelationFilter
    posts?: PostListRelationFilter
  }

  export type recipe_typeOrderByWithRelationInput = {
    id_recipe_type?: SortOrder
    name?: SortOrder
    recipes?: recipeOrderByRelationAggregateInput
    posts?: postOrderByRelationAggregateInput
  }

  export type recipe_typeWhereUniqueInput = Prisma.AtLeast<{
    id_recipe_type?: string
    AND?: recipe_typeWhereInput | recipe_typeWhereInput[]
    OR?: recipe_typeWhereInput[]
    NOT?: recipe_typeWhereInput | recipe_typeWhereInput[]
    name?: StringFilter<"recipe_type"> | string
    recipes?: RecipeListRelationFilter
    posts?: PostListRelationFilter
  }, "id_recipe_type">

  export type recipe_typeOrderByWithAggregationInput = {
    id_recipe_type?: SortOrder
    name?: SortOrder
    _count?: recipe_typeCountOrderByAggregateInput
    _max?: recipe_typeMaxOrderByAggregateInput
    _min?: recipe_typeMinOrderByAggregateInput
  }

  export type recipe_typeScalarWhereWithAggregatesInput = {
    AND?: recipe_typeScalarWhereWithAggregatesInput | recipe_typeScalarWhereWithAggregatesInput[]
    OR?: recipe_typeScalarWhereWithAggregatesInput[]
    NOT?: recipe_typeScalarWhereWithAggregatesInput | recipe_typeScalarWhereWithAggregatesInput[]
    id_recipe_type?: StringWithAggregatesFilter<"recipe_type"> | string
    name?: StringWithAggregatesFilter<"recipe_type"> | string
  }

  export type ingredientWhereInput = {
    AND?: ingredientWhereInput | ingredientWhereInput[]
    OR?: ingredientWhereInput[]
    NOT?: ingredientWhereInput | ingredientWhereInput[]
    id_ingredient?: StringFilter<"ingredient"> | string
    name?: StringFilter<"ingredient"> | string
    recipes?: IngredientinrecipeListRelationFilter
  }

  export type ingredientOrderByWithRelationInput = {
    id_ingredient?: SortOrder
    name?: SortOrder
    recipes?: ingredientinrecipeOrderByRelationAggregateInput
  }

  export type ingredientWhereUniqueInput = Prisma.AtLeast<{
    id_ingredient?: string
    AND?: ingredientWhereInput | ingredientWhereInput[]
    OR?: ingredientWhereInput[]
    NOT?: ingredientWhereInput | ingredientWhereInput[]
    name?: StringFilter<"ingredient"> | string
    recipes?: IngredientinrecipeListRelationFilter
  }, "id_ingredient">

  export type ingredientOrderByWithAggregationInput = {
    id_ingredient?: SortOrder
    name?: SortOrder
    _count?: ingredientCountOrderByAggregateInput
    _max?: ingredientMaxOrderByAggregateInput
    _min?: ingredientMinOrderByAggregateInput
  }

  export type ingredientScalarWhereWithAggregatesInput = {
    AND?: ingredientScalarWhereWithAggregatesInput | ingredientScalarWhereWithAggregatesInput[]
    OR?: ingredientScalarWhereWithAggregatesInput[]
    NOT?: ingredientScalarWhereWithAggregatesInput | ingredientScalarWhereWithAggregatesInput[]
    id_ingredient?: StringWithAggregatesFilter<"ingredient"> | string
    name?: StringWithAggregatesFilter<"ingredient"> | string
  }

  export type ingredientinrecipeWhereInput = {
    AND?: ingredientinrecipeWhereInput | ingredientinrecipeWhereInput[]
    OR?: ingredientinrecipeWhereInput[]
    NOT?: ingredientinrecipeWhereInput | ingredientinrecipeWhereInput[]
    id?: StringFilter<"ingredientinrecipe"> | string
    quantity?: IntFilter<"ingredientinrecipe"> | number
    unit?: StringFilter<"ingredientinrecipe"> | string
    recipeid?: StringFilter<"ingredientinrecipe"> | string
    ingredientid?: StringFilter<"ingredientinrecipe"> | string
    recipe?: XOR<RecipeRelationFilter, recipeWhereInput>
    ingredient?: XOR<IngredientRelationFilter, ingredientWhereInput>
  }

  export type ingredientinrecipeOrderByWithRelationInput = {
    id?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    recipeid?: SortOrder
    ingredientid?: SortOrder
    recipe?: recipeOrderByWithRelationInput
    ingredient?: ingredientOrderByWithRelationInput
  }

  export type ingredientinrecipeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ingredientinrecipeWhereInput | ingredientinrecipeWhereInput[]
    OR?: ingredientinrecipeWhereInput[]
    NOT?: ingredientinrecipeWhereInput | ingredientinrecipeWhereInput[]
    quantity?: IntFilter<"ingredientinrecipe"> | number
    unit?: StringFilter<"ingredientinrecipe"> | string
    recipeid?: StringFilter<"ingredientinrecipe"> | string
    ingredientid?: StringFilter<"ingredientinrecipe"> | string
    recipe?: XOR<RecipeRelationFilter, recipeWhereInput>
    ingredient?: XOR<IngredientRelationFilter, ingredientWhereInput>
  }, "id">

  export type ingredientinrecipeOrderByWithAggregationInput = {
    id?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    recipeid?: SortOrder
    ingredientid?: SortOrder
    _count?: ingredientinrecipeCountOrderByAggregateInput
    _avg?: ingredientinrecipeAvgOrderByAggregateInput
    _max?: ingredientinrecipeMaxOrderByAggregateInput
    _min?: ingredientinrecipeMinOrderByAggregateInput
    _sum?: ingredientinrecipeSumOrderByAggregateInput
  }

  export type ingredientinrecipeScalarWhereWithAggregatesInput = {
    AND?: ingredientinrecipeScalarWhereWithAggregatesInput | ingredientinrecipeScalarWhereWithAggregatesInput[]
    OR?: ingredientinrecipeScalarWhereWithAggregatesInput[]
    NOT?: ingredientinrecipeScalarWhereWithAggregatesInput | ingredientinrecipeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ingredientinrecipe"> | string
    quantity?: IntWithAggregatesFilter<"ingredientinrecipe"> | number
    unit?: StringWithAggregatesFilter<"ingredientinrecipe"> | string
    recipeid?: StringWithAggregatesFilter<"ingredientinrecipe"> | string
    ingredientid?: StringWithAggregatesFilter<"ingredientinrecipe"> | string
  }

  export type postWhereInput = {
    AND?: postWhereInput | postWhereInput[]
    OR?: postWhereInput[]
    NOT?: postWhereInput | postWhereInput[]
    id_post?: StringFilter<"post"> | string
    title?: StringFilter<"post"> | string
    content?: StringFilter<"post"> | string
    date?: DateTimeFilter<"post"> | Date | string
    iduser?: StringFilter<"post"> | string
    idrecipe?: StringFilter<"post"> | string
    recipetypeid?: StringFilter<"post"> | string
    user?: XOR<UserRelationFilter, userWhereInput>
    recipe?: XOR<RecipeRelationFilter, recipeWhereInput>
    recipetype?: XOR<Recipe_typeRelationFilter, recipe_typeWhereInput>
  }

  export type postOrderByWithRelationInput = {
    id_post?: SortOrder
    title?: SortOrder
    content?: SortOrder
    date?: SortOrder
    iduser?: SortOrder
    idrecipe?: SortOrder
    recipetypeid?: SortOrder
    user?: userOrderByWithRelationInput
    recipe?: recipeOrderByWithRelationInput
    recipetype?: recipe_typeOrderByWithRelationInput
  }

  export type postWhereUniqueInput = Prisma.AtLeast<{
    id_post?: string
    AND?: postWhereInput | postWhereInput[]
    OR?: postWhereInput[]
    NOT?: postWhereInput | postWhereInput[]
    title?: StringFilter<"post"> | string
    content?: StringFilter<"post"> | string
    date?: DateTimeFilter<"post"> | Date | string
    iduser?: StringFilter<"post"> | string
    idrecipe?: StringFilter<"post"> | string
    recipetypeid?: StringFilter<"post"> | string
    user?: XOR<UserRelationFilter, userWhereInput>
    recipe?: XOR<RecipeRelationFilter, recipeWhereInput>
    recipetype?: XOR<Recipe_typeRelationFilter, recipe_typeWhereInput>
  }, "id_post">

  export type postOrderByWithAggregationInput = {
    id_post?: SortOrder
    title?: SortOrder
    content?: SortOrder
    date?: SortOrder
    iduser?: SortOrder
    idrecipe?: SortOrder
    recipetypeid?: SortOrder
    _count?: postCountOrderByAggregateInput
    _max?: postMaxOrderByAggregateInput
    _min?: postMinOrderByAggregateInput
  }

  export type postScalarWhereWithAggregatesInput = {
    AND?: postScalarWhereWithAggregatesInput | postScalarWhereWithAggregatesInput[]
    OR?: postScalarWhereWithAggregatesInput[]
    NOT?: postScalarWhereWithAggregatesInput | postScalarWhereWithAggregatesInput[]
    id_post?: StringWithAggregatesFilter<"post"> | string
    title?: StringWithAggregatesFilter<"post"> | string
    content?: StringWithAggregatesFilter<"post"> | string
    date?: DateTimeWithAggregatesFilter<"post"> | Date | string
    iduser?: StringWithAggregatesFilter<"post"> | string
    idrecipe?: StringWithAggregatesFilter<"post"> | string
    recipetypeid?: StringWithAggregatesFilter<"post"> | string
  }

  export type userCreateInput = {
    id?: string
    pseudo: string
    password: string
    email: string
    isadmin?: boolean
    posts?: postCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateInput = {
    id?: string
    pseudo: string
    password: string
    email: string
    isadmin?: boolean
    posts?: postUncheckedCreateNestedManyWithoutUserInput
  }

  export type userUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    isadmin?: BoolFieldUpdateOperationsInput | boolean
    posts?: postUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    isadmin?: BoolFieldUpdateOperationsInput | boolean
    posts?: postUncheckedUpdateManyWithoutUserNestedInput
  }

  export type userCreateManyInput = {
    id?: string
    pseudo: string
    password: string
    email: string
    isadmin?: boolean
  }

  export type userUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    isadmin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type userUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    isadmin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type recipeCreateInput = {
    id_recipe: string
    time_of_preparation: number
    name: string
    description?: string | null
    number_of_person: number
    photo?: string | null
    ingredients?: ingredientinrecipeCreateNestedManyWithoutRecipeInput
    posts?: postCreateNestedManyWithoutRecipeInput
    recipetype: recipe_typeCreateNestedOneWithoutRecipesInput
  }

  export type recipeUncheckedCreateInput = {
    id_recipe: string
    time_of_preparation: number
    name: string
    description?: string | null
    number_of_person: number
    photo?: string | null
    recipetypeid: string
    ingredients?: ingredientinrecipeUncheckedCreateNestedManyWithoutRecipeInput
    posts?: postUncheckedCreateNestedManyWithoutRecipeInput
  }

  export type recipeUpdateInput = {
    id_recipe?: StringFieldUpdateOperationsInput | string
    time_of_preparation?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    number_of_person?: IntFieldUpdateOperationsInput | number
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    ingredients?: ingredientinrecipeUpdateManyWithoutRecipeNestedInput
    posts?: postUpdateManyWithoutRecipeNestedInput
    recipetype?: recipe_typeUpdateOneRequiredWithoutRecipesNestedInput
  }

  export type recipeUncheckedUpdateInput = {
    id_recipe?: StringFieldUpdateOperationsInput | string
    time_of_preparation?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    number_of_person?: IntFieldUpdateOperationsInput | number
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    recipetypeid?: StringFieldUpdateOperationsInput | string
    ingredients?: ingredientinrecipeUncheckedUpdateManyWithoutRecipeNestedInput
    posts?: postUncheckedUpdateManyWithoutRecipeNestedInput
  }

  export type recipeCreateManyInput = {
    id_recipe: string
    time_of_preparation: number
    name: string
    description?: string | null
    number_of_person: number
    photo?: string | null
    recipetypeid: string
  }

  export type recipeUpdateManyMutationInput = {
    id_recipe?: StringFieldUpdateOperationsInput | string
    time_of_preparation?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    number_of_person?: IntFieldUpdateOperationsInput | number
    photo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type recipeUncheckedUpdateManyInput = {
    id_recipe?: StringFieldUpdateOperationsInput | string
    time_of_preparation?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    number_of_person?: IntFieldUpdateOperationsInput | number
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    recipetypeid?: StringFieldUpdateOperationsInput | string
  }

  export type recipe_typeCreateInput = {
    id_recipe_type: string
    name: string
    recipes?: recipeCreateNestedManyWithoutRecipetypeInput
    posts?: postCreateNestedManyWithoutRecipetypeInput
  }

  export type recipe_typeUncheckedCreateInput = {
    id_recipe_type: string
    name: string
    recipes?: recipeUncheckedCreateNestedManyWithoutRecipetypeInput
    posts?: postUncheckedCreateNestedManyWithoutRecipetypeInput
  }

  export type recipe_typeUpdateInput = {
    id_recipe_type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    recipes?: recipeUpdateManyWithoutRecipetypeNestedInput
    posts?: postUpdateManyWithoutRecipetypeNestedInput
  }

  export type recipe_typeUncheckedUpdateInput = {
    id_recipe_type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    recipes?: recipeUncheckedUpdateManyWithoutRecipetypeNestedInput
    posts?: postUncheckedUpdateManyWithoutRecipetypeNestedInput
  }

  export type recipe_typeCreateManyInput = {
    id_recipe_type: string
    name: string
  }

  export type recipe_typeUpdateManyMutationInput = {
    id_recipe_type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type recipe_typeUncheckedUpdateManyInput = {
    id_recipe_type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ingredientCreateInput = {
    id_ingredient: string
    name: string
    recipes?: ingredientinrecipeCreateNestedManyWithoutIngredientInput
  }

  export type ingredientUncheckedCreateInput = {
    id_ingredient: string
    name: string
    recipes?: ingredientinrecipeUncheckedCreateNestedManyWithoutIngredientInput
  }

  export type ingredientUpdateInput = {
    id_ingredient?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    recipes?: ingredientinrecipeUpdateManyWithoutIngredientNestedInput
  }

  export type ingredientUncheckedUpdateInput = {
    id_ingredient?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    recipes?: ingredientinrecipeUncheckedUpdateManyWithoutIngredientNestedInput
  }

  export type ingredientCreateManyInput = {
    id_ingredient: string
    name: string
  }

  export type ingredientUpdateManyMutationInput = {
    id_ingredient?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ingredientUncheckedUpdateManyInput = {
    id_ingredient?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ingredientinrecipeCreateInput = {
    id?: string
    quantity: number
    unit: string
    recipe: recipeCreateNestedOneWithoutIngredientsInput
    ingredient: ingredientCreateNestedOneWithoutRecipesInput
  }

  export type ingredientinrecipeUncheckedCreateInput = {
    id?: string
    quantity: number
    unit: string
    recipeid: string
    ingredientid: string
  }

  export type ingredientinrecipeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    recipe?: recipeUpdateOneRequiredWithoutIngredientsNestedInput
    ingredient?: ingredientUpdateOneRequiredWithoutRecipesNestedInput
  }

  export type ingredientinrecipeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    recipeid?: StringFieldUpdateOperationsInput | string
    ingredientid?: StringFieldUpdateOperationsInput | string
  }

  export type ingredientinrecipeCreateManyInput = {
    id?: string
    quantity: number
    unit: string
    recipeid: string
    ingredientid: string
  }

  export type ingredientinrecipeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
  }

  export type ingredientinrecipeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    recipeid?: StringFieldUpdateOperationsInput | string
    ingredientid?: StringFieldUpdateOperationsInput | string
  }

  export type postCreateInput = {
    id_post: string
    title: string
    content: string
    date: Date | string
    user: userCreateNestedOneWithoutPostsInput
    recipe: recipeCreateNestedOneWithoutPostsInput
    recipetype: recipe_typeCreateNestedOneWithoutPostsInput
  }

  export type postUncheckedCreateInput = {
    id_post: string
    title: string
    content: string
    date: Date | string
    iduser: string
    idrecipe: string
    recipetypeid: string
  }

  export type postUpdateInput = {
    id_post?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneRequiredWithoutPostsNestedInput
    recipe?: recipeUpdateOneRequiredWithoutPostsNestedInput
    recipetype?: recipe_typeUpdateOneRequiredWithoutPostsNestedInput
  }

  export type postUncheckedUpdateInput = {
    id_post?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    iduser?: StringFieldUpdateOperationsInput | string
    idrecipe?: StringFieldUpdateOperationsInput | string
    recipetypeid?: StringFieldUpdateOperationsInput | string
  }

  export type postCreateManyInput = {
    id_post: string
    title: string
    content: string
    date: Date | string
    iduser: string
    idrecipe: string
    recipetypeid: string
  }

  export type postUpdateManyMutationInput = {
    id_post?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type postUncheckedUpdateManyInput = {
    id_post?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    iduser?: StringFieldUpdateOperationsInput | string
    idrecipe?: StringFieldUpdateOperationsInput | string
    recipetypeid?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type PostListRelationFilter = {
    every?: postWhereInput
    some?: postWhereInput
    none?: postWhereInput
  }

  export type postOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type userCountOrderByAggregateInput = {
    id?: SortOrder
    pseudo?: SortOrder
    password?: SortOrder
    email?: SortOrder
    isadmin?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    id?: SortOrder
    pseudo?: SortOrder
    password?: SortOrder
    email?: SortOrder
    isadmin?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    id?: SortOrder
    pseudo?: SortOrder
    password?: SortOrder
    email?: SortOrder
    isadmin?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IngredientinrecipeListRelationFilter = {
    every?: ingredientinrecipeWhereInput
    some?: ingredientinrecipeWhereInput
    none?: ingredientinrecipeWhereInput
  }

  export type Recipe_typeRelationFilter = {
    is?: recipe_typeWhereInput
    isNot?: recipe_typeWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ingredientinrecipeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type recipeCountOrderByAggregateInput = {
    id_recipe?: SortOrder
    time_of_preparation?: SortOrder
    name?: SortOrder
    description?: SortOrder
    number_of_person?: SortOrder
    photo?: SortOrder
    recipetypeid?: SortOrder
  }

  export type recipeAvgOrderByAggregateInput = {
    time_of_preparation?: SortOrder
    number_of_person?: SortOrder
  }

  export type recipeMaxOrderByAggregateInput = {
    id_recipe?: SortOrder
    time_of_preparation?: SortOrder
    name?: SortOrder
    description?: SortOrder
    number_of_person?: SortOrder
    photo?: SortOrder
    recipetypeid?: SortOrder
  }

  export type recipeMinOrderByAggregateInput = {
    id_recipe?: SortOrder
    time_of_preparation?: SortOrder
    name?: SortOrder
    description?: SortOrder
    number_of_person?: SortOrder
    photo?: SortOrder
    recipetypeid?: SortOrder
  }

  export type recipeSumOrderByAggregateInput = {
    time_of_preparation?: SortOrder
    number_of_person?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type RecipeListRelationFilter = {
    every?: recipeWhereInput
    some?: recipeWhereInput
    none?: recipeWhereInput
  }

  export type recipeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type recipe_typeCountOrderByAggregateInput = {
    id_recipe_type?: SortOrder
    name?: SortOrder
  }

  export type recipe_typeMaxOrderByAggregateInput = {
    id_recipe_type?: SortOrder
    name?: SortOrder
  }

  export type recipe_typeMinOrderByAggregateInput = {
    id_recipe_type?: SortOrder
    name?: SortOrder
  }

  export type ingredientCountOrderByAggregateInput = {
    id_ingredient?: SortOrder
    name?: SortOrder
  }

  export type ingredientMaxOrderByAggregateInput = {
    id_ingredient?: SortOrder
    name?: SortOrder
  }

  export type ingredientMinOrderByAggregateInput = {
    id_ingredient?: SortOrder
    name?: SortOrder
  }

  export type RecipeRelationFilter = {
    is?: recipeWhereInput
    isNot?: recipeWhereInput
  }

  export type IngredientRelationFilter = {
    is?: ingredientWhereInput
    isNot?: ingredientWhereInput
  }

  export type ingredientinrecipeCountOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    recipeid?: SortOrder
    ingredientid?: SortOrder
  }

  export type ingredientinrecipeAvgOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type ingredientinrecipeMaxOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    recipeid?: SortOrder
    ingredientid?: SortOrder
  }

  export type ingredientinrecipeMinOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    recipeid?: SortOrder
    ingredientid?: SortOrder
  }

  export type ingredientinrecipeSumOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserRelationFilter = {
    is?: userWhereInput
    isNot?: userWhereInput
  }

  export type postCountOrderByAggregateInput = {
    id_post?: SortOrder
    title?: SortOrder
    content?: SortOrder
    date?: SortOrder
    iduser?: SortOrder
    idrecipe?: SortOrder
    recipetypeid?: SortOrder
  }

  export type postMaxOrderByAggregateInput = {
    id_post?: SortOrder
    title?: SortOrder
    content?: SortOrder
    date?: SortOrder
    iduser?: SortOrder
    idrecipe?: SortOrder
    recipetypeid?: SortOrder
  }

  export type postMinOrderByAggregateInput = {
    id_post?: SortOrder
    title?: SortOrder
    content?: SortOrder
    date?: SortOrder
    iduser?: SortOrder
    idrecipe?: SortOrder
    recipetypeid?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type postCreateNestedManyWithoutUserInput = {
    create?: XOR<postCreateWithoutUserInput, postUncheckedCreateWithoutUserInput> | postCreateWithoutUserInput[] | postUncheckedCreateWithoutUserInput[]
    connectOrCreate?: postCreateOrConnectWithoutUserInput | postCreateOrConnectWithoutUserInput[]
    createMany?: postCreateManyUserInputEnvelope
    connect?: postWhereUniqueInput | postWhereUniqueInput[]
  }

  export type postUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<postCreateWithoutUserInput, postUncheckedCreateWithoutUserInput> | postCreateWithoutUserInput[] | postUncheckedCreateWithoutUserInput[]
    connectOrCreate?: postCreateOrConnectWithoutUserInput | postCreateOrConnectWithoutUserInput[]
    createMany?: postCreateManyUserInputEnvelope
    connect?: postWhereUniqueInput | postWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type postUpdateManyWithoutUserNestedInput = {
    create?: XOR<postCreateWithoutUserInput, postUncheckedCreateWithoutUserInput> | postCreateWithoutUserInput[] | postUncheckedCreateWithoutUserInput[]
    connectOrCreate?: postCreateOrConnectWithoutUserInput | postCreateOrConnectWithoutUserInput[]
    upsert?: postUpsertWithWhereUniqueWithoutUserInput | postUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: postCreateManyUserInputEnvelope
    set?: postWhereUniqueInput | postWhereUniqueInput[]
    disconnect?: postWhereUniqueInput | postWhereUniqueInput[]
    delete?: postWhereUniqueInput | postWhereUniqueInput[]
    connect?: postWhereUniqueInput | postWhereUniqueInput[]
    update?: postUpdateWithWhereUniqueWithoutUserInput | postUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: postUpdateManyWithWhereWithoutUserInput | postUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: postScalarWhereInput | postScalarWhereInput[]
  }

  export type postUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<postCreateWithoutUserInput, postUncheckedCreateWithoutUserInput> | postCreateWithoutUserInput[] | postUncheckedCreateWithoutUserInput[]
    connectOrCreate?: postCreateOrConnectWithoutUserInput | postCreateOrConnectWithoutUserInput[]
    upsert?: postUpsertWithWhereUniqueWithoutUserInput | postUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: postCreateManyUserInputEnvelope
    set?: postWhereUniqueInput | postWhereUniqueInput[]
    disconnect?: postWhereUniqueInput | postWhereUniqueInput[]
    delete?: postWhereUniqueInput | postWhereUniqueInput[]
    connect?: postWhereUniqueInput | postWhereUniqueInput[]
    update?: postUpdateWithWhereUniqueWithoutUserInput | postUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: postUpdateManyWithWhereWithoutUserInput | postUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: postScalarWhereInput | postScalarWhereInput[]
  }

  export type ingredientinrecipeCreateNestedManyWithoutRecipeInput = {
    create?: XOR<ingredientinrecipeCreateWithoutRecipeInput, ingredientinrecipeUncheckedCreateWithoutRecipeInput> | ingredientinrecipeCreateWithoutRecipeInput[] | ingredientinrecipeUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: ingredientinrecipeCreateOrConnectWithoutRecipeInput | ingredientinrecipeCreateOrConnectWithoutRecipeInput[]
    createMany?: ingredientinrecipeCreateManyRecipeInputEnvelope
    connect?: ingredientinrecipeWhereUniqueInput | ingredientinrecipeWhereUniqueInput[]
  }

  export type postCreateNestedManyWithoutRecipeInput = {
    create?: XOR<postCreateWithoutRecipeInput, postUncheckedCreateWithoutRecipeInput> | postCreateWithoutRecipeInput[] | postUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: postCreateOrConnectWithoutRecipeInput | postCreateOrConnectWithoutRecipeInput[]
    createMany?: postCreateManyRecipeInputEnvelope
    connect?: postWhereUniqueInput | postWhereUniqueInput[]
  }

  export type recipe_typeCreateNestedOneWithoutRecipesInput = {
    create?: XOR<recipe_typeCreateWithoutRecipesInput, recipe_typeUncheckedCreateWithoutRecipesInput>
    connectOrCreate?: recipe_typeCreateOrConnectWithoutRecipesInput
    connect?: recipe_typeWhereUniqueInput
  }

  export type ingredientinrecipeUncheckedCreateNestedManyWithoutRecipeInput = {
    create?: XOR<ingredientinrecipeCreateWithoutRecipeInput, ingredientinrecipeUncheckedCreateWithoutRecipeInput> | ingredientinrecipeCreateWithoutRecipeInput[] | ingredientinrecipeUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: ingredientinrecipeCreateOrConnectWithoutRecipeInput | ingredientinrecipeCreateOrConnectWithoutRecipeInput[]
    createMany?: ingredientinrecipeCreateManyRecipeInputEnvelope
    connect?: ingredientinrecipeWhereUniqueInput | ingredientinrecipeWhereUniqueInput[]
  }

  export type postUncheckedCreateNestedManyWithoutRecipeInput = {
    create?: XOR<postCreateWithoutRecipeInput, postUncheckedCreateWithoutRecipeInput> | postCreateWithoutRecipeInput[] | postUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: postCreateOrConnectWithoutRecipeInput | postCreateOrConnectWithoutRecipeInput[]
    createMany?: postCreateManyRecipeInputEnvelope
    connect?: postWhereUniqueInput | postWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type ingredientinrecipeUpdateManyWithoutRecipeNestedInput = {
    create?: XOR<ingredientinrecipeCreateWithoutRecipeInput, ingredientinrecipeUncheckedCreateWithoutRecipeInput> | ingredientinrecipeCreateWithoutRecipeInput[] | ingredientinrecipeUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: ingredientinrecipeCreateOrConnectWithoutRecipeInput | ingredientinrecipeCreateOrConnectWithoutRecipeInput[]
    upsert?: ingredientinrecipeUpsertWithWhereUniqueWithoutRecipeInput | ingredientinrecipeUpsertWithWhereUniqueWithoutRecipeInput[]
    createMany?: ingredientinrecipeCreateManyRecipeInputEnvelope
    set?: ingredientinrecipeWhereUniqueInput | ingredientinrecipeWhereUniqueInput[]
    disconnect?: ingredientinrecipeWhereUniqueInput | ingredientinrecipeWhereUniqueInput[]
    delete?: ingredientinrecipeWhereUniqueInput | ingredientinrecipeWhereUniqueInput[]
    connect?: ingredientinrecipeWhereUniqueInput | ingredientinrecipeWhereUniqueInput[]
    update?: ingredientinrecipeUpdateWithWhereUniqueWithoutRecipeInput | ingredientinrecipeUpdateWithWhereUniqueWithoutRecipeInput[]
    updateMany?: ingredientinrecipeUpdateManyWithWhereWithoutRecipeInput | ingredientinrecipeUpdateManyWithWhereWithoutRecipeInput[]
    deleteMany?: ingredientinrecipeScalarWhereInput | ingredientinrecipeScalarWhereInput[]
  }

  export type postUpdateManyWithoutRecipeNestedInput = {
    create?: XOR<postCreateWithoutRecipeInput, postUncheckedCreateWithoutRecipeInput> | postCreateWithoutRecipeInput[] | postUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: postCreateOrConnectWithoutRecipeInput | postCreateOrConnectWithoutRecipeInput[]
    upsert?: postUpsertWithWhereUniqueWithoutRecipeInput | postUpsertWithWhereUniqueWithoutRecipeInput[]
    createMany?: postCreateManyRecipeInputEnvelope
    set?: postWhereUniqueInput | postWhereUniqueInput[]
    disconnect?: postWhereUniqueInput | postWhereUniqueInput[]
    delete?: postWhereUniqueInput | postWhereUniqueInput[]
    connect?: postWhereUniqueInput | postWhereUniqueInput[]
    update?: postUpdateWithWhereUniqueWithoutRecipeInput | postUpdateWithWhereUniqueWithoutRecipeInput[]
    updateMany?: postUpdateManyWithWhereWithoutRecipeInput | postUpdateManyWithWhereWithoutRecipeInput[]
    deleteMany?: postScalarWhereInput | postScalarWhereInput[]
  }

  export type recipe_typeUpdateOneRequiredWithoutRecipesNestedInput = {
    create?: XOR<recipe_typeCreateWithoutRecipesInput, recipe_typeUncheckedCreateWithoutRecipesInput>
    connectOrCreate?: recipe_typeCreateOrConnectWithoutRecipesInput
    upsert?: recipe_typeUpsertWithoutRecipesInput
    connect?: recipe_typeWhereUniqueInput
    update?: XOR<XOR<recipe_typeUpdateToOneWithWhereWithoutRecipesInput, recipe_typeUpdateWithoutRecipesInput>, recipe_typeUncheckedUpdateWithoutRecipesInput>
  }

  export type ingredientinrecipeUncheckedUpdateManyWithoutRecipeNestedInput = {
    create?: XOR<ingredientinrecipeCreateWithoutRecipeInput, ingredientinrecipeUncheckedCreateWithoutRecipeInput> | ingredientinrecipeCreateWithoutRecipeInput[] | ingredientinrecipeUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: ingredientinrecipeCreateOrConnectWithoutRecipeInput | ingredientinrecipeCreateOrConnectWithoutRecipeInput[]
    upsert?: ingredientinrecipeUpsertWithWhereUniqueWithoutRecipeInput | ingredientinrecipeUpsertWithWhereUniqueWithoutRecipeInput[]
    createMany?: ingredientinrecipeCreateManyRecipeInputEnvelope
    set?: ingredientinrecipeWhereUniqueInput | ingredientinrecipeWhereUniqueInput[]
    disconnect?: ingredientinrecipeWhereUniqueInput | ingredientinrecipeWhereUniqueInput[]
    delete?: ingredientinrecipeWhereUniqueInput | ingredientinrecipeWhereUniqueInput[]
    connect?: ingredientinrecipeWhereUniqueInput | ingredientinrecipeWhereUniqueInput[]
    update?: ingredientinrecipeUpdateWithWhereUniqueWithoutRecipeInput | ingredientinrecipeUpdateWithWhereUniqueWithoutRecipeInput[]
    updateMany?: ingredientinrecipeUpdateManyWithWhereWithoutRecipeInput | ingredientinrecipeUpdateManyWithWhereWithoutRecipeInput[]
    deleteMany?: ingredientinrecipeScalarWhereInput | ingredientinrecipeScalarWhereInput[]
  }

  export type postUncheckedUpdateManyWithoutRecipeNestedInput = {
    create?: XOR<postCreateWithoutRecipeInput, postUncheckedCreateWithoutRecipeInput> | postCreateWithoutRecipeInput[] | postUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: postCreateOrConnectWithoutRecipeInput | postCreateOrConnectWithoutRecipeInput[]
    upsert?: postUpsertWithWhereUniqueWithoutRecipeInput | postUpsertWithWhereUniqueWithoutRecipeInput[]
    createMany?: postCreateManyRecipeInputEnvelope
    set?: postWhereUniqueInput | postWhereUniqueInput[]
    disconnect?: postWhereUniqueInput | postWhereUniqueInput[]
    delete?: postWhereUniqueInput | postWhereUniqueInput[]
    connect?: postWhereUniqueInput | postWhereUniqueInput[]
    update?: postUpdateWithWhereUniqueWithoutRecipeInput | postUpdateWithWhereUniqueWithoutRecipeInput[]
    updateMany?: postUpdateManyWithWhereWithoutRecipeInput | postUpdateManyWithWhereWithoutRecipeInput[]
    deleteMany?: postScalarWhereInput | postScalarWhereInput[]
  }

  export type recipeCreateNestedManyWithoutRecipetypeInput = {
    create?: XOR<recipeCreateWithoutRecipetypeInput, recipeUncheckedCreateWithoutRecipetypeInput> | recipeCreateWithoutRecipetypeInput[] | recipeUncheckedCreateWithoutRecipetypeInput[]
    connectOrCreate?: recipeCreateOrConnectWithoutRecipetypeInput | recipeCreateOrConnectWithoutRecipetypeInput[]
    createMany?: recipeCreateManyRecipetypeInputEnvelope
    connect?: recipeWhereUniqueInput | recipeWhereUniqueInput[]
  }

  export type postCreateNestedManyWithoutRecipetypeInput = {
    create?: XOR<postCreateWithoutRecipetypeInput, postUncheckedCreateWithoutRecipetypeInput> | postCreateWithoutRecipetypeInput[] | postUncheckedCreateWithoutRecipetypeInput[]
    connectOrCreate?: postCreateOrConnectWithoutRecipetypeInput | postCreateOrConnectWithoutRecipetypeInput[]
    createMany?: postCreateManyRecipetypeInputEnvelope
    connect?: postWhereUniqueInput | postWhereUniqueInput[]
  }

  export type recipeUncheckedCreateNestedManyWithoutRecipetypeInput = {
    create?: XOR<recipeCreateWithoutRecipetypeInput, recipeUncheckedCreateWithoutRecipetypeInput> | recipeCreateWithoutRecipetypeInput[] | recipeUncheckedCreateWithoutRecipetypeInput[]
    connectOrCreate?: recipeCreateOrConnectWithoutRecipetypeInput | recipeCreateOrConnectWithoutRecipetypeInput[]
    createMany?: recipeCreateManyRecipetypeInputEnvelope
    connect?: recipeWhereUniqueInput | recipeWhereUniqueInput[]
  }

  export type postUncheckedCreateNestedManyWithoutRecipetypeInput = {
    create?: XOR<postCreateWithoutRecipetypeInput, postUncheckedCreateWithoutRecipetypeInput> | postCreateWithoutRecipetypeInput[] | postUncheckedCreateWithoutRecipetypeInput[]
    connectOrCreate?: postCreateOrConnectWithoutRecipetypeInput | postCreateOrConnectWithoutRecipetypeInput[]
    createMany?: postCreateManyRecipetypeInputEnvelope
    connect?: postWhereUniqueInput | postWhereUniqueInput[]
  }

  export type recipeUpdateManyWithoutRecipetypeNestedInput = {
    create?: XOR<recipeCreateWithoutRecipetypeInput, recipeUncheckedCreateWithoutRecipetypeInput> | recipeCreateWithoutRecipetypeInput[] | recipeUncheckedCreateWithoutRecipetypeInput[]
    connectOrCreate?: recipeCreateOrConnectWithoutRecipetypeInput | recipeCreateOrConnectWithoutRecipetypeInput[]
    upsert?: recipeUpsertWithWhereUniqueWithoutRecipetypeInput | recipeUpsertWithWhereUniqueWithoutRecipetypeInput[]
    createMany?: recipeCreateManyRecipetypeInputEnvelope
    set?: recipeWhereUniqueInput | recipeWhereUniqueInput[]
    disconnect?: recipeWhereUniqueInput | recipeWhereUniqueInput[]
    delete?: recipeWhereUniqueInput | recipeWhereUniqueInput[]
    connect?: recipeWhereUniqueInput | recipeWhereUniqueInput[]
    update?: recipeUpdateWithWhereUniqueWithoutRecipetypeInput | recipeUpdateWithWhereUniqueWithoutRecipetypeInput[]
    updateMany?: recipeUpdateManyWithWhereWithoutRecipetypeInput | recipeUpdateManyWithWhereWithoutRecipetypeInput[]
    deleteMany?: recipeScalarWhereInput | recipeScalarWhereInput[]
  }

  export type postUpdateManyWithoutRecipetypeNestedInput = {
    create?: XOR<postCreateWithoutRecipetypeInput, postUncheckedCreateWithoutRecipetypeInput> | postCreateWithoutRecipetypeInput[] | postUncheckedCreateWithoutRecipetypeInput[]
    connectOrCreate?: postCreateOrConnectWithoutRecipetypeInput | postCreateOrConnectWithoutRecipetypeInput[]
    upsert?: postUpsertWithWhereUniqueWithoutRecipetypeInput | postUpsertWithWhereUniqueWithoutRecipetypeInput[]
    createMany?: postCreateManyRecipetypeInputEnvelope
    set?: postWhereUniqueInput | postWhereUniqueInput[]
    disconnect?: postWhereUniqueInput | postWhereUniqueInput[]
    delete?: postWhereUniqueInput | postWhereUniqueInput[]
    connect?: postWhereUniqueInput | postWhereUniqueInput[]
    update?: postUpdateWithWhereUniqueWithoutRecipetypeInput | postUpdateWithWhereUniqueWithoutRecipetypeInput[]
    updateMany?: postUpdateManyWithWhereWithoutRecipetypeInput | postUpdateManyWithWhereWithoutRecipetypeInput[]
    deleteMany?: postScalarWhereInput | postScalarWhereInput[]
  }

  export type recipeUncheckedUpdateManyWithoutRecipetypeNestedInput = {
    create?: XOR<recipeCreateWithoutRecipetypeInput, recipeUncheckedCreateWithoutRecipetypeInput> | recipeCreateWithoutRecipetypeInput[] | recipeUncheckedCreateWithoutRecipetypeInput[]
    connectOrCreate?: recipeCreateOrConnectWithoutRecipetypeInput | recipeCreateOrConnectWithoutRecipetypeInput[]
    upsert?: recipeUpsertWithWhereUniqueWithoutRecipetypeInput | recipeUpsertWithWhereUniqueWithoutRecipetypeInput[]
    createMany?: recipeCreateManyRecipetypeInputEnvelope
    set?: recipeWhereUniqueInput | recipeWhereUniqueInput[]
    disconnect?: recipeWhereUniqueInput | recipeWhereUniqueInput[]
    delete?: recipeWhereUniqueInput | recipeWhereUniqueInput[]
    connect?: recipeWhereUniqueInput | recipeWhereUniqueInput[]
    update?: recipeUpdateWithWhereUniqueWithoutRecipetypeInput | recipeUpdateWithWhereUniqueWithoutRecipetypeInput[]
    updateMany?: recipeUpdateManyWithWhereWithoutRecipetypeInput | recipeUpdateManyWithWhereWithoutRecipetypeInput[]
    deleteMany?: recipeScalarWhereInput | recipeScalarWhereInput[]
  }

  export type postUncheckedUpdateManyWithoutRecipetypeNestedInput = {
    create?: XOR<postCreateWithoutRecipetypeInput, postUncheckedCreateWithoutRecipetypeInput> | postCreateWithoutRecipetypeInput[] | postUncheckedCreateWithoutRecipetypeInput[]
    connectOrCreate?: postCreateOrConnectWithoutRecipetypeInput | postCreateOrConnectWithoutRecipetypeInput[]
    upsert?: postUpsertWithWhereUniqueWithoutRecipetypeInput | postUpsertWithWhereUniqueWithoutRecipetypeInput[]
    createMany?: postCreateManyRecipetypeInputEnvelope
    set?: postWhereUniqueInput | postWhereUniqueInput[]
    disconnect?: postWhereUniqueInput | postWhereUniqueInput[]
    delete?: postWhereUniqueInput | postWhereUniqueInput[]
    connect?: postWhereUniqueInput | postWhereUniqueInput[]
    update?: postUpdateWithWhereUniqueWithoutRecipetypeInput | postUpdateWithWhereUniqueWithoutRecipetypeInput[]
    updateMany?: postUpdateManyWithWhereWithoutRecipetypeInput | postUpdateManyWithWhereWithoutRecipetypeInput[]
    deleteMany?: postScalarWhereInput | postScalarWhereInput[]
  }

  export type ingredientinrecipeCreateNestedManyWithoutIngredientInput = {
    create?: XOR<ingredientinrecipeCreateWithoutIngredientInput, ingredientinrecipeUncheckedCreateWithoutIngredientInput> | ingredientinrecipeCreateWithoutIngredientInput[] | ingredientinrecipeUncheckedCreateWithoutIngredientInput[]
    connectOrCreate?: ingredientinrecipeCreateOrConnectWithoutIngredientInput | ingredientinrecipeCreateOrConnectWithoutIngredientInput[]
    createMany?: ingredientinrecipeCreateManyIngredientInputEnvelope
    connect?: ingredientinrecipeWhereUniqueInput | ingredientinrecipeWhereUniqueInput[]
  }

  export type ingredientinrecipeUncheckedCreateNestedManyWithoutIngredientInput = {
    create?: XOR<ingredientinrecipeCreateWithoutIngredientInput, ingredientinrecipeUncheckedCreateWithoutIngredientInput> | ingredientinrecipeCreateWithoutIngredientInput[] | ingredientinrecipeUncheckedCreateWithoutIngredientInput[]
    connectOrCreate?: ingredientinrecipeCreateOrConnectWithoutIngredientInput | ingredientinrecipeCreateOrConnectWithoutIngredientInput[]
    createMany?: ingredientinrecipeCreateManyIngredientInputEnvelope
    connect?: ingredientinrecipeWhereUniqueInput | ingredientinrecipeWhereUniqueInput[]
  }

  export type ingredientinrecipeUpdateManyWithoutIngredientNestedInput = {
    create?: XOR<ingredientinrecipeCreateWithoutIngredientInput, ingredientinrecipeUncheckedCreateWithoutIngredientInput> | ingredientinrecipeCreateWithoutIngredientInput[] | ingredientinrecipeUncheckedCreateWithoutIngredientInput[]
    connectOrCreate?: ingredientinrecipeCreateOrConnectWithoutIngredientInput | ingredientinrecipeCreateOrConnectWithoutIngredientInput[]
    upsert?: ingredientinrecipeUpsertWithWhereUniqueWithoutIngredientInput | ingredientinrecipeUpsertWithWhereUniqueWithoutIngredientInput[]
    createMany?: ingredientinrecipeCreateManyIngredientInputEnvelope
    set?: ingredientinrecipeWhereUniqueInput | ingredientinrecipeWhereUniqueInput[]
    disconnect?: ingredientinrecipeWhereUniqueInput | ingredientinrecipeWhereUniqueInput[]
    delete?: ingredientinrecipeWhereUniqueInput | ingredientinrecipeWhereUniqueInput[]
    connect?: ingredientinrecipeWhereUniqueInput | ingredientinrecipeWhereUniqueInput[]
    update?: ingredientinrecipeUpdateWithWhereUniqueWithoutIngredientInput | ingredientinrecipeUpdateWithWhereUniqueWithoutIngredientInput[]
    updateMany?: ingredientinrecipeUpdateManyWithWhereWithoutIngredientInput | ingredientinrecipeUpdateManyWithWhereWithoutIngredientInput[]
    deleteMany?: ingredientinrecipeScalarWhereInput | ingredientinrecipeScalarWhereInput[]
  }

  export type ingredientinrecipeUncheckedUpdateManyWithoutIngredientNestedInput = {
    create?: XOR<ingredientinrecipeCreateWithoutIngredientInput, ingredientinrecipeUncheckedCreateWithoutIngredientInput> | ingredientinrecipeCreateWithoutIngredientInput[] | ingredientinrecipeUncheckedCreateWithoutIngredientInput[]
    connectOrCreate?: ingredientinrecipeCreateOrConnectWithoutIngredientInput | ingredientinrecipeCreateOrConnectWithoutIngredientInput[]
    upsert?: ingredientinrecipeUpsertWithWhereUniqueWithoutIngredientInput | ingredientinrecipeUpsertWithWhereUniqueWithoutIngredientInput[]
    createMany?: ingredientinrecipeCreateManyIngredientInputEnvelope
    set?: ingredientinrecipeWhereUniqueInput | ingredientinrecipeWhereUniqueInput[]
    disconnect?: ingredientinrecipeWhereUniqueInput | ingredientinrecipeWhereUniqueInput[]
    delete?: ingredientinrecipeWhereUniqueInput | ingredientinrecipeWhereUniqueInput[]
    connect?: ingredientinrecipeWhereUniqueInput | ingredientinrecipeWhereUniqueInput[]
    update?: ingredientinrecipeUpdateWithWhereUniqueWithoutIngredientInput | ingredientinrecipeUpdateWithWhereUniqueWithoutIngredientInput[]
    updateMany?: ingredientinrecipeUpdateManyWithWhereWithoutIngredientInput | ingredientinrecipeUpdateManyWithWhereWithoutIngredientInput[]
    deleteMany?: ingredientinrecipeScalarWhereInput | ingredientinrecipeScalarWhereInput[]
  }

  export type recipeCreateNestedOneWithoutIngredientsInput = {
    create?: XOR<recipeCreateWithoutIngredientsInput, recipeUncheckedCreateWithoutIngredientsInput>
    connectOrCreate?: recipeCreateOrConnectWithoutIngredientsInput
    connect?: recipeWhereUniqueInput
  }

  export type ingredientCreateNestedOneWithoutRecipesInput = {
    create?: XOR<ingredientCreateWithoutRecipesInput, ingredientUncheckedCreateWithoutRecipesInput>
    connectOrCreate?: ingredientCreateOrConnectWithoutRecipesInput
    connect?: ingredientWhereUniqueInput
  }

  export type recipeUpdateOneRequiredWithoutIngredientsNestedInput = {
    create?: XOR<recipeCreateWithoutIngredientsInput, recipeUncheckedCreateWithoutIngredientsInput>
    connectOrCreate?: recipeCreateOrConnectWithoutIngredientsInput
    upsert?: recipeUpsertWithoutIngredientsInput
    connect?: recipeWhereUniqueInput
    update?: XOR<XOR<recipeUpdateToOneWithWhereWithoutIngredientsInput, recipeUpdateWithoutIngredientsInput>, recipeUncheckedUpdateWithoutIngredientsInput>
  }

  export type ingredientUpdateOneRequiredWithoutRecipesNestedInput = {
    create?: XOR<ingredientCreateWithoutRecipesInput, ingredientUncheckedCreateWithoutRecipesInput>
    connectOrCreate?: ingredientCreateOrConnectWithoutRecipesInput
    upsert?: ingredientUpsertWithoutRecipesInput
    connect?: ingredientWhereUniqueInput
    update?: XOR<XOR<ingredientUpdateToOneWithWhereWithoutRecipesInput, ingredientUpdateWithoutRecipesInput>, ingredientUncheckedUpdateWithoutRecipesInput>
  }

  export type userCreateNestedOneWithoutPostsInput = {
    create?: XOR<userCreateWithoutPostsInput, userUncheckedCreateWithoutPostsInput>
    connectOrCreate?: userCreateOrConnectWithoutPostsInput
    connect?: userWhereUniqueInput
  }

  export type recipeCreateNestedOneWithoutPostsInput = {
    create?: XOR<recipeCreateWithoutPostsInput, recipeUncheckedCreateWithoutPostsInput>
    connectOrCreate?: recipeCreateOrConnectWithoutPostsInput
    connect?: recipeWhereUniqueInput
  }

  export type recipe_typeCreateNestedOneWithoutPostsInput = {
    create?: XOR<recipe_typeCreateWithoutPostsInput, recipe_typeUncheckedCreateWithoutPostsInput>
    connectOrCreate?: recipe_typeCreateOrConnectWithoutPostsInput
    connect?: recipe_typeWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type userUpdateOneRequiredWithoutPostsNestedInput = {
    create?: XOR<userCreateWithoutPostsInput, userUncheckedCreateWithoutPostsInput>
    connectOrCreate?: userCreateOrConnectWithoutPostsInput
    upsert?: userUpsertWithoutPostsInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutPostsInput, userUpdateWithoutPostsInput>, userUncheckedUpdateWithoutPostsInput>
  }

  export type recipeUpdateOneRequiredWithoutPostsNestedInput = {
    create?: XOR<recipeCreateWithoutPostsInput, recipeUncheckedCreateWithoutPostsInput>
    connectOrCreate?: recipeCreateOrConnectWithoutPostsInput
    upsert?: recipeUpsertWithoutPostsInput
    connect?: recipeWhereUniqueInput
    update?: XOR<XOR<recipeUpdateToOneWithWhereWithoutPostsInput, recipeUpdateWithoutPostsInput>, recipeUncheckedUpdateWithoutPostsInput>
  }

  export type recipe_typeUpdateOneRequiredWithoutPostsNestedInput = {
    create?: XOR<recipe_typeCreateWithoutPostsInput, recipe_typeUncheckedCreateWithoutPostsInput>
    connectOrCreate?: recipe_typeCreateOrConnectWithoutPostsInput
    upsert?: recipe_typeUpsertWithoutPostsInput
    connect?: recipe_typeWhereUniqueInput
    update?: XOR<XOR<recipe_typeUpdateToOneWithWhereWithoutPostsInput, recipe_typeUpdateWithoutPostsInput>, recipe_typeUncheckedUpdateWithoutPostsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type postCreateWithoutUserInput = {
    id_post: string
    title: string
    content: string
    date: Date | string
    recipe: recipeCreateNestedOneWithoutPostsInput
    recipetype: recipe_typeCreateNestedOneWithoutPostsInput
  }

  export type postUncheckedCreateWithoutUserInput = {
    id_post: string
    title: string
    content: string
    date: Date | string
    idrecipe: string
    recipetypeid: string
  }

  export type postCreateOrConnectWithoutUserInput = {
    where: postWhereUniqueInput
    create: XOR<postCreateWithoutUserInput, postUncheckedCreateWithoutUserInput>
  }

  export type postCreateManyUserInputEnvelope = {
    data: postCreateManyUserInput | postCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type postUpsertWithWhereUniqueWithoutUserInput = {
    where: postWhereUniqueInput
    update: XOR<postUpdateWithoutUserInput, postUncheckedUpdateWithoutUserInput>
    create: XOR<postCreateWithoutUserInput, postUncheckedCreateWithoutUserInput>
  }

  export type postUpdateWithWhereUniqueWithoutUserInput = {
    where: postWhereUniqueInput
    data: XOR<postUpdateWithoutUserInput, postUncheckedUpdateWithoutUserInput>
  }

  export type postUpdateManyWithWhereWithoutUserInput = {
    where: postScalarWhereInput
    data: XOR<postUpdateManyMutationInput, postUncheckedUpdateManyWithoutUserInput>
  }

  export type postScalarWhereInput = {
    AND?: postScalarWhereInput | postScalarWhereInput[]
    OR?: postScalarWhereInput[]
    NOT?: postScalarWhereInput | postScalarWhereInput[]
    id_post?: StringFilter<"post"> | string
    title?: StringFilter<"post"> | string
    content?: StringFilter<"post"> | string
    date?: DateTimeFilter<"post"> | Date | string
    iduser?: StringFilter<"post"> | string
    idrecipe?: StringFilter<"post"> | string
    recipetypeid?: StringFilter<"post"> | string
  }

  export type ingredientinrecipeCreateWithoutRecipeInput = {
    id?: string
    quantity: number
    unit: string
    ingredient: ingredientCreateNestedOneWithoutRecipesInput
  }

  export type ingredientinrecipeUncheckedCreateWithoutRecipeInput = {
    id?: string
    quantity: number
    unit: string
    ingredientid: string
  }

  export type ingredientinrecipeCreateOrConnectWithoutRecipeInput = {
    where: ingredientinrecipeWhereUniqueInput
    create: XOR<ingredientinrecipeCreateWithoutRecipeInput, ingredientinrecipeUncheckedCreateWithoutRecipeInput>
  }

  export type ingredientinrecipeCreateManyRecipeInputEnvelope = {
    data: ingredientinrecipeCreateManyRecipeInput | ingredientinrecipeCreateManyRecipeInput[]
    skipDuplicates?: boolean
  }

  export type postCreateWithoutRecipeInput = {
    id_post: string
    title: string
    content: string
    date: Date | string
    user: userCreateNestedOneWithoutPostsInput
    recipetype: recipe_typeCreateNestedOneWithoutPostsInput
  }

  export type postUncheckedCreateWithoutRecipeInput = {
    id_post: string
    title: string
    content: string
    date: Date | string
    iduser: string
    recipetypeid: string
  }

  export type postCreateOrConnectWithoutRecipeInput = {
    where: postWhereUniqueInput
    create: XOR<postCreateWithoutRecipeInput, postUncheckedCreateWithoutRecipeInput>
  }

  export type postCreateManyRecipeInputEnvelope = {
    data: postCreateManyRecipeInput | postCreateManyRecipeInput[]
    skipDuplicates?: boolean
  }

  export type recipe_typeCreateWithoutRecipesInput = {
    id_recipe_type: string
    name: string
    posts?: postCreateNestedManyWithoutRecipetypeInput
  }

  export type recipe_typeUncheckedCreateWithoutRecipesInput = {
    id_recipe_type: string
    name: string
    posts?: postUncheckedCreateNestedManyWithoutRecipetypeInput
  }

  export type recipe_typeCreateOrConnectWithoutRecipesInput = {
    where: recipe_typeWhereUniqueInput
    create: XOR<recipe_typeCreateWithoutRecipesInput, recipe_typeUncheckedCreateWithoutRecipesInput>
  }

  export type ingredientinrecipeUpsertWithWhereUniqueWithoutRecipeInput = {
    where: ingredientinrecipeWhereUniqueInput
    update: XOR<ingredientinrecipeUpdateWithoutRecipeInput, ingredientinrecipeUncheckedUpdateWithoutRecipeInput>
    create: XOR<ingredientinrecipeCreateWithoutRecipeInput, ingredientinrecipeUncheckedCreateWithoutRecipeInput>
  }

  export type ingredientinrecipeUpdateWithWhereUniqueWithoutRecipeInput = {
    where: ingredientinrecipeWhereUniqueInput
    data: XOR<ingredientinrecipeUpdateWithoutRecipeInput, ingredientinrecipeUncheckedUpdateWithoutRecipeInput>
  }

  export type ingredientinrecipeUpdateManyWithWhereWithoutRecipeInput = {
    where: ingredientinrecipeScalarWhereInput
    data: XOR<ingredientinrecipeUpdateManyMutationInput, ingredientinrecipeUncheckedUpdateManyWithoutRecipeInput>
  }

  export type ingredientinrecipeScalarWhereInput = {
    AND?: ingredientinrecipeScalarWhereInput | ingredientinrecipeScalarWhereInput[]
    OR?: ingredientinrecipeScalarWhereInput[]
    NOT?: ingredientinrecipeScalarWhereInput | ingredientinrecipeScalarWhereInput[]
    id?: StringFilter<"ingredientinrecipe"> | string
    quantity?: IntFilter<"ingredientinrecipe"> | number
    unit?: StringFilter<"ingredientinrecipe"> | string
    recipeid?: StringFilter<"ingredientinrecipe"> | string
    ingredientid?: StringFilter<"ingredientinrecipe"> | string
  }

  export type postUpsertWithWhereUniqueWithoutRecipeInput = {
    where: postWhereUniqueInput
    update: XOR<postUpdateWithoutRecipeInput, postUncheckedUpdateWithoutRecipeInput>
    create: XOR<postCreateWithoutRecipeInput, postUncheckedCreateWithoutRecipeInput>
  }

  export type postUpdateWithWhereUniqueWithoutRecipeInput = {
    where: postWhereUniqueInput
    data: XOR<postUpdateWithoutRecipeInput, postUncheckedUpdateWithoutRecipeInput>
  }

  export type postUpdateManyWithWhereWithoutRecipeInput = {
    where: postScalarWhereInput
    data: XOR<postUpdateManyMutationInput, postUncheckedUpdateManyWithoutRecipeInput>
  }

  export type recipe_typeUpsertWithoutRecipesInput = {
    update: XOR<recipe_typeUpdateWithoutRecipesInput, recipe_typeUncheckedUpdateWithoutRecipesInput>
    create: XOR<recipe_typeCreateWithoutRecipesInput, recipe_typeUncheckedCreateWithoutRecipesInput>
    where?: recipe_typeWhereInput
  }

  export type recipe_typeUpdateToOneWithWhereWithoutRecipesInput = {
    where?: recipe_typeWhereInput
    data: XOR<recipe_typeUpdateWithoutRecipesInput, recipe_typeUncheckedUpdateWithoutRecipesInput>
  }

  export type recipe_typeUpdateWithoutRecipesInput = {
    id_recipe_type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    posts?: postUpdateManyWithoutRecipetypeNestedInput
  }

  export type recipe_typeUncheckedUpdateWithoutRecipesInput = {
    id_recipe_type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    posts?: postUncheckedUpdateManyWithoutRecipetypeNestedInput
  }

  export type recipeCreateWithoutRecipetypeInput = {
    id_recipe: string
    time_of_preparation: number
    name: string
    description?: string | null
    number_of_person: number
    photo?: string | null
    ingredients?: ingredientinrecipeCreateNestedManyWithoutRecipeInput
    posts?: postCreateNestedManyWithoutRecipeInput
  }

  export type recipeUncheckedCreateWithoutRecipetypeInput = {
    id_recipe: string
    time_of_preparation: number
    name: string
    description?: string | null
    number_of_person: number
    photo?: string | null
    ingredients?: ingredientinrecipeUncheckedCreateNestedManyWithoutRecipeInput
    posts?: postUncheckedCreateNestedManyWithoutRecipeInput
  }

  export type recipeCreateOrConnectWithoutRecipetypeInput = {
    where: recipeWhereUniqueInput
    create: XOR<recipeCreateWithoutRecipetypeInput, recipeUncheckedCreateWithoutRecipetypeInput>
  }

  export type recipeCreateManyRecipetypeInputEnvelope = {
    data: recipeCreateManyRecipetypeInput | recipeCreateManyRecipetypeInput[]
    skipDuplicates?: boolean
  }

  export type postCreateWithoutRecipetypeInput = {
    id_post: string
    title: string
    content: string
    date: Date | string
    user: userCreateNestedOneWithoutPostsInput
    recipe: recipeCreateNestedOneWithoutPostsInput
  }

  export type postUncheckedCreateWithoutRecipetypeInput = {
    id_post: string
    title: string
    content: string
    date: Date | string
    iduser: string
    idrecipe: string
  }

  export type postCreateOrConnectWithoutRecipetypeInput = {
    where: postWhereUniqueInput
    create: XOR<postCreateWithoutRecipetypeInput, postUncheckedCreateWithoutRecipetypeInput>
  }

  export type postCreateManyRecipetypeInputEnvelope = {
    data: postCreateManyRecipetypeInput | postCreateManyRecipetypeInput[]
    skipDuplicates?: boolean
  }

  export type recipeUpsertWithWhereUniqueWithoutRecipetypeInput = {
    where: recipeWhereUniqueInput
    update: XOR<recipeUpdateWithoutRecipetypeInput, recipeUncheckedUpdateWithoutRecipetypeInput>
    create: XOR<recipeCreateWithoutRecipetypeInput, recipeUncheckedCreateWithoutRecipetypeInput>
  }

  export type recipeUpdateWithWhereUniqueWithoutRecipetypeInput = {
    where: recipeWhereUniqueInput
    data: XOR<recipeUpdateWithoutRecipetypeInput, recipeUncheckedUpdateWithoutRecipetypeInput>
  }

  export type recipeUpdateManyWithWhereWithoutRecipetypeInput = {
    where: recipeScalarWhereInput
    data: XOR<recipeUpdateManyMutationInput, recipeUncheckedUpdateManyWithoutRecipetypeInput>
  }

  export type recipeScalarWhereInput = {
    AND?: recipeScalarWhereInput | recipeScalarWhereInput[]
    OR?: recipeScalarWhereInput[]
    NOT?: recipeScalarWhereInput | recipeScalarWhereInput[]
    id_recipe?: StringFilter<"recipe"> | string
    time_of_preparation?: IntFilter<"recipe"> | number
    name?: StringFilter<"recipe"> | string
    description?: StringNullableFilter<"recipe"> | string | null
    number_of_person?: IntFilter<"recipe"> | number
    photo?: StringNullableFilter<"recipe"> | string | null
    recipetypeid?: StringFilter<"recipe"> | string
  }

  export type postUpsertWithWhereUniqueWithoutRecipetypeInput = {
    where: postWhereUniqueInput
    update: XOR<postUpdateWithoutRecipetypeInput, postUncheckedUpdateWithoutRecipetypeInput>
    create: XOR<postCreateWithoutRecipetypeInput, postUncheckedCreateWithoutRecipetypeInput>
  }

  export type postUpdateWithWhereUniqueWithoutRecipetypeInput = {
    where: postWhereUniqueInput
    data: XOR<postUpdateWithoutRecipetypeInput, postUncheckedUpdateWithoutRecipetypeInput>
  }

  export type postUpdateManyWithWhereWithoutRecipetypeInput = {
    where: postScalarWhereInput
    data: XOR<postUpdateManyMutationInput, postUncheckedUpdateManyWithoutRecipetypeInput>
  }

  export type ingredientinrecipeCreateWithoutIngredientInput = {
    id?: string
    quantity: number
    unit: string
    recipe: recipeCreateNestedOneWithoutIngredientsInput
  }

  export type ingredientinrecipeUncheckedCreateWithoutIngredientInput = {
    id?: string
    quantity: number
    unit: string
    recipeid: string
  }

  export type ingredientinrecipeCreateOrConnectWithoutIngredientInput = {
    where: ingredientinrecipeWhereUniqueInput
    create: XOR<ingredientinrecipeCreateWithoutIngredientInput, ingredientinrecipeUncheckedCreateWithoutIngredientInput>
  }

  export type ingredientinrecipeCreateManyIngredientInputEnvelope = {
    data: ingredientinrecipeCreateManyIngredientInput | ingredientinrecipeCreateManyIngredientInput[]
    skipDuplicates?: boolean
  }

  export type ingredientinrecipeUpsertWithWhereUniqueWithoutIngredientInput = {
    where: ingredientinrecipeWhereUniqueInput
    update: XOR<ingredientinrecipeUpdateWithoutIngredientInput, ingredientinrecipeUncheckedUpdateWithoutIngredientInput>
    create: XOR<ingredientinrecipeCreateWithoutIngredientInput, ingredientinrecipeUncheckedCreateWithoutIngredientInput>
  }

  export type ingredientinrecipeUpdateWithWhereUniqueWithoutIngredientInput = {
    where: ingredientinrecipeWhereUniqueInput
    data: XOR<ingredientinrecipeUpdateWithoutIngredientInput, ingredientinrecipeUncheckedUpdateWithoutIngredientInput>
  }

  export type ingredientinrecipeUpdateManyWithWhereWithoutIngredientInput = {
    where: ingredientinrecipeScalarWhereInput
    data: XOR<ingredientinrecipeUpdateManyMutationInput, ingredientinrecipeUncheckedUpdateManyWithoutIngredientInput>
  }

  export type recipeCreateWithoutIngredientsInput = {
    id_recipe: string
    time_of_preparation: number
    name: string
    description?: string | null
    number_of_person: number
    photo?: string | null
    posts?: postCreateNestedManyWithoutRecipeInput
    recipetype: recipe_typeCreateNestedOneWithoutRecipesInput
  }

  export type recipeUncheckedCreateWithoutIngredientsInput = {
    id_recipe: string
    time_of_preparation: number
    name: string
    description?: string | null
    number_of_person: number
    photo?: string | null
    recipetypeid: string
    posts?: postUncheckedCreateNestedManyWithoutRecipeInput
  }

  export type recipeCreateOrConnectWithoutIngredientsInput = {
    where: recipeWhereUniqueInput
    create: XOR<recipeCreateWithoutIngredientsInput, recipeUncheckedCreateWithoutIngredientsInput>
  }

  export type ingredientCreateWithoutRecipesInput = {
    id_ingredient: string
    name: string
  }

  export type ingredientUncheckedCreateWithoutRecipesInput = {
    id_ingredient: string
    name: string
  }

  export type ingredientCreateOrConnectWithoutRecipesInput = {
    where: ingredientWhereUniqueInput
    create: XOR<ingredientCreateWithoutRecipesInput, ingredientUncheckedCreateWithoutRecipesInput>
  }

  export type recipeUpsertWithoutIngredientsInput = {
    update: XOR<recipeUpdateWithoutIngredientsInput, recipeUncheckedUpdateWithoutIngredientsInput>
    create: XOR<recipeCreateWithoutIngredientsInput, recipeUncheckedCreateWithoutIngredientsInput>
    where?: recipeWhereInput
  }

  export type recipeUpdateToOneWithWhereWithoutIngredientsInput = {
    where?: recipeWhereInput
    data: XOR<recipeUpdateWithoutIngredientsInput, recipeUncheckedUpdateWithoutIngredientsInput>
  }

  export type recipeUpdateWithoutIngredientsInput = {
    id_recipe?: StringFieldUpdateOperationsInput | string
    time_of_preparation?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    number_of_person?: IntFieldUpdateOperationsInput | number
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    posts?: postUpdateManyWithoutRecipeNestedInput
    recipetype?: recipe_typeUpdateOneRequiredWithoutRecipesNestedInput
  }

  export type recipeUncheckedUpdateWithoutIngredientsInput = {
    id_recipe?: StringFieldUpdateOperationsInput | string
    time_of_preparation?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    number_of_person?: IntFieldUpdateOperationsInput | number
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    recipetypeid?: StringFieldUpdateOperationsInput | string
    posts?: postUncheckedUpdateManyWithoutRecipeNestedInput
  }

  export type ingredientUpsertWithoutRecipesInput = {
    update: XOR<ingredientUpdateWithoutRecipesInput, ingredientUncheckedUpdateWithoutRecipesInput>
    create: XOR<ingredientCreateWithoutRecipesInput, ingredientUncheckedCreateWithoutRecipesInput>
    where?: ingredientWhereInput
  }

  export type ingredientUpdateToOneWithWhereWithoutRecipesInput = {
    where?: ingredientWhereInput
    data: XOR<ingredientUpdateWithoutRecipesInput, ingredientUncheckedUpdateWithoutRecipesInput>
  }

  export type ingredientUpdateWithoutRecipesInput = {
    id_ingredient?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ingredientUncheckedUpdateWithoutRecipesInput = {
    id_ingredient?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type userCreateWithoutPostsInput = {
    id?: string
    pseudo: string
    password: string
    email: string
    isadmin?: boolean
  }

  export type userUncheckedCreateWithoutPostsInput = {
    id?: string
    pseudo: string
    password: string
    email: string
    isadmin?: boolean
  }

  export type userCreateOrConnectWithoutPostsInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutPostsInput, userUncheckedCreateWithoutPostsInput>
  }

  export type recipeCreateWithoutPostsInput = {
    id_recipe: string
    time_of_preparation: number
    name: string
    description?: string | null
    number_of_person: number
    photo?: string | null
    ingredients?: ingredientinrecipeCreateNestedManyWithoutRecipeInput
    recipetype: recipe_typeCreateNestedOneWithoutRecipesInput
  }

  export type recipeUncheckedCreateWithoutPostsInput = {
    id_recipe: string
    time_of_preparation: number
    name: string
    description?: string | null
    number_of_person: number
    photo?: string | null
    recipetypeid: string
    ingredients?: ingredientinrecipeUncheckedCreateNestedManyWithoutRecipeInput
  }

  export type recipeCreateOrConnectWithoutPostsInput = {
    where: recipeWhereUniqueInput
    create: XOR<recipeCreateWithoutPostsInput, recipeUncheckedCreateWithoutPostsInput>
  }

  export type recipe_typeCreateWithoutPostsInput = {
    id_recipe_type: string
    name: string
    recipes?: recipeCreateNestedManyWithoutRecipetypeInput
  }

  export type recipe_typeUncheckedCreateWithoutPostsInput = {
    id_recipe_type: string
    name: string
    recipes?: recipeUncheckedCreateNestedManyWithoutRecipetypeInput
  }

  export type recipe_typeCreateOrConnectWithoutPostsInput = {
    where: recipe_typeWhereUniqueInput
    create: XOR<recipe_typeCreateWithoutPostsInput, recipe_typeUncheckedCreateWithoutPostsInput>
  }

  export type userUpsertWithoutPostsInput = {
    update: XOR<userUpdateWithoutPostsInput, userUncheckedUpdateWithoutPostsInput>
    create: XOR<userCreateWithoutPostsInput, userUncheckedCreateWithoutPostsInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutPostsInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutPostsInput, userUncheckedUpdateWithoutPostsInput>
  }

  export type userUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    isadmin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type userUncheckedUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    isadmin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type recipeUpsertWithoutPostsInput = {
    update: XOR<recipeUpdateWithoutPostsInput, recipeUncheckedUpdateWithoutPostsInput>
    create: XOR<recipeCreateWithoutPostsInput, recipeUncheckedCreateWithoutPostsInput>
    where?: recipeWhereInput
  }

  export type recipeUpdateToOneWithWhereWithoutPostsInput = {
    where?: recipeWhereInput
    data: XOR<recipeUpdateWithoutPostsInput, recipeUncheckedUpdateWithoutPostsInput>
  }

  export type recipeUpdateWithoutPostsInput = {
    id_recipe?: StringFieldUpdateOperationsInput | string
    time_of_preparation?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    number_of_person?: IntFieldUpdateOperationsInput | number
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    ingredients?: ingredientinrecipeUpdateManyWithoutRecipeNestedInput
    recipetype?: recipe_typeUpdateOneRequiredWithoutRecipesNestedInput
  }

  export type recipeUncheckedUpdateWithoutPostsInput = {
    id_recipe?: StringFieldUpdateOperationsInput | string
    time_of_preparation?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    number_of_person?: IntFieldUpdateOperationsInput | number
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    recipetypeid?: StringFieldUpdateOperationsInput | string
    ingredients?: ingredientinrecipeUncheckedUpdateManyWithoutRecipeNestedInput
  }

  export type recipe_typeUpsertWithoutPostsInput = {
    update: XOR<recipe_typeUpdateWithoutPostsInput, recipe_typeUncheckedUpdateWithoutPostsInput>
    create: XOR<recipe_typeCreateWithoutPostsInput, recipe_typeUncheckedCreateWithoutPostsInput>
    where?: recipe_typeWhereInput
  }

  export type recipe_typeUpdateToOneWithWhereWithoutPostsInput = {
    where?: recipe_typeWhereInput
    data: XOR<recipe_typeUpdateWithoutPostsInput, recipe_typeUncheckedUpdateWithoutPostsInput>
  }

  export type recipe_typeUpdateWithoutPostsInput = {
    id_recipe_type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    recipes?: recipeUpdateManyWithoutRecipetypeNestedInput
  }

  export type recipe_typeUncheckedUpdateWithoutPostsInput = {
    id_recipe_type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    recipes?: recipeUncheckedUpdateManyWithoutRecipetypeNestedInput
  }

  export type postCreateManyUserInput = {
    id_post: string
    title: string
    content: string
    date: Date | string
    idrecipe: string
    recipetypeid: string
  }

  export type postUpdateWithoutUserInput = {
    id_post?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    recipe?: recipeUpdateOneRequiredWithoutPostsNestedInput
    recipetype?: recipe_typeUpdateOneRequiredWithoutPostsNestedInput
  }

  export type postUncheckedUpdateWithoutUserInput = {
    id_post?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    idrecipe?: StringFieldUpdateOperationsInput | string
    recipetypeid?: StringFieldUpdateOperationsInput | string
  }

  export type postUncheckedUpdateManyWithoutUserInput = {
    id_post?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    idrecipe?: StringFieldUpdateOperationsInput | string
    recipetypeid?: StringFieldUpdateOperationsInput | string
  }

  export type ingredientinrecipeCreateManyRecipeInput = {
    id?: string
    quantity: number
    unit: string
    ingredientid: string
  }

  export type postCreateManyRecipeInput = {
    id_post: string
    title: string
    content: string
    date: Date | string
    iduser: string
    recipetypeid: string
  }

  export type ingredientinrecipeUpdateWithoutRecipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    ingredient?: ingredientUpdateOneRequiredWithoutRecipesNestedInput
  }

  export type ingredientinrecipeUncheckedUpdateWithoutRecipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    ingredientid?: StringFieldUpdateOperationsInput | string
  }

  export type ingredientinrecipeUncheckedUpdateManyWithoutRecipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    ingredientid?: StringFieldUpdateOperationsInput | string
  }

  export type postUpdateWithoutRecipeInput = {
    id_post?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneRequiredWithoutPostsNestedInput
    recipetype?: recipe_typeUpdateOneRequiredWithoutPostsNestedInput
  }

  export type postUncheckedUpdateWithoutRecipeInput = {
    id_post?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    iduser?: StringFieldUpdateOperationsInput | string
    recipetypeid?: StringFieldUpdateOperationsInput | string
  }

  export type postUncheckedUpdateManyWithoutRecipeInput = {
    id_post?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    iduser?: StringFieldUpdateOperationsInput | string
    recipetypeid?: StringFieldUpdateOperationsInput | string
  }

  export type recipeCreateManyRecipetypeInput = {
    id_recipe: string
    time_of_preparation: number
    name: string
    description?: string | null
    number_of_person: number
    photo?: string | null
  }

  export type postCreateManyRecipetypeInput = {
    id_post: string
    title: string
    content: string
    date: Date | string
    iduser: string
    idrecipe: string
  }

  export type recipeUpdateWithoutRecipetypeInput = {
    id_recipe?: StringFieldUpdateOperationsInput | string
    time_of_preparation?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    number_of_person?: IntFieldUpdateOperationsInput | number
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    ingredients?: ingredientinrecipeUpdateManyWithoutRecipeNestedInput
    posts?: postUpdateManyWithoutRecipeNestedInput
  }

  export type recipeUncheckedUpdateWithoutRecipetypeInput = {
    id_recipe?: StringFieldUpdateOperationsInput | string
    time_of_preparation?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    number_of_person?: IntFieldUpdateOperationsInput | number
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    ingredients?: ingredientinrecipeUncheckedUpdateManyWithoutRecipeNestedInput
    posts?: postUncheckedUpdateManyWithoutRecipeNestedInput
  }

  export type recipeUncheckedUpdateManyWithoutRecipetypeInput = {
    id_recipe?: StringFieldUpdateOperationsInput | string
    time_of_preparation?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    number_of_person?: IntFieldUpdateOperationsInput | number
    photo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type postUpdateWithoutRecipetypeInput = {
    id_post?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneRequiredWithoutPostsNestedInput
    recipe?: recipeUpdateOneRequiredWithoutPostsNestedInput
  }

  export type postUncheckedUpdateWithoutRecipetypeInput = {
    id_post?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    iduser?: StringFieldUpdateOperationsInput | string
    idrecipe?: StringFieldUpdateOperationsInput | string
  }

  export type postUncheckedUpdateManyWithoutRecipetypeInput = {
    id_post?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    iduser?: StringFieldUpdateOperationsInput | string
    idrecipe?: StringFieldUpdateOperationsInput | string
  }

  export type ingredientinrecipeCreateManyIngredientInput = {
    id?: string
    quantity: number
    unit: string
    recipeid: string
  }

  export type ingredientinrecipeUpdateWithoutIngredientInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    recipe?: recipeUpdateOneRequiredWithoutIngredientsNestedInput
  }

  export type ingredientinrecipeUncheckedUpdateWithoutIngredientInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    recipeid?: StringFieldUpdateOperationsInput | string
  }

  export type ingredientinrecipeUncheckedUpdateManyWithoutIngredientInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    recipeid?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RecipeCountOutputTypeDefaultArgs instead
     */
    export type RecipeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RecipeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Recipe_typeCountOutputTypeDefaultArgs instead
     */
    export type Recipe_typeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Recipe_typeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use IngredientCountOutputTypeDefaultArgs instead
     */
    export type IngredientCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = IngredientCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use userDefaultArgs instead
     */
    export type userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = userDefaultArgs<ExtArgs>
    /**
     * @deprecated Use recipeDefaultArgs instead
     */
    export type recipeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = recipeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use recipe_typeDefaultArgs instead
     */
    export type recipe_typeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = recipe_typeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ingredientDefaultArgs instead
     */
    export type ingredientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ingredientDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ingredientinrecipeDefaultArgs instead
     */
    export type ingredientinrecipeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ingredientinrecipeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use postDefaultArgs instead
     */
    export type postArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = postDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}